'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

exports.standardizeConfig = standardizeConfig;
exports.mergeServiceConfig = mergeServiceConfig;
exports.getSettings = getSettings;

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolveNameForBoolean(role, bool, _ref) {
  var defaults = _ref.defaults,
      disabled = _ref.disabled;

  var name = void 0;
  if (bool) {
    name = defaults[role];
    if (!name) throw new Error('The "' + role + '" service has no default');
  } else {
    name = disabled[role];
    if (!name) throw new Error('The "' + role + '" service cannot be disabled');
  }
  return name;
}

function standardizeConfig(role, config, resolver) {
  if (config instanceof Array) {
    if (typeof config[0] == 'boolean' && resolver) {
      return [resolveNameForBoolean(role, config[0], resolver), config[1]];
    }
    return config;
  }
  var className = void 0,
      settings = void 0;

  switch (typeof config === 'undefined' ? 'undefined' : (0, _typeof3.default)(config)) {
    case 'string':
      // handle a string that refers to a class name
      className = config;
      settings = {};
      break;
    case 'function':
      // handle a service constructor
      className = config;
      settings = {};
      break;
    case 'object':
      // handle a settings object -- use the default version
      className = resolver ? resolveNameForBoolean(role, true, resolver) : true;
      settings = config;
      // TODO could also handle a service instance or constructor here
      break;
    case 'boolean':
      className = resolver ? resolveNameForBoolean(role, config, resolver) : config;
      settings = {};
      break;
    default:
      throw new Error('could not parse settings for ' + role + ':', config);
  }

  return [className, settings];
}

function mergeServiceConfig(role, sink, source, resolver) {
  sink = standardizeConfig(role, sink, resolver);
  source = standardizeConfig(role, source);
  if (sink[0] === false || source[0] === false) return source;

  return [typeof source[0] != 'boolean' ? source[0] : sink[0], (0, _lodash2.default)({}, sink[1], source[1])];
}

function getSettings(config) {
  if (config instanceof Array) return config[1];
  return config;
}