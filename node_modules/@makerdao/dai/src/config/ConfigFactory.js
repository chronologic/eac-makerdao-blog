'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _test = require('./presets/test.json');

var _test2 = _interopRequireDefault(_test);

var _kovan = require('./presets/kovan.json');

var _kovan2 = _interopRequireDefault(_kovan);

var _http = require('./presets/http.json');

var _http2 = _interopRequireDefault(_http);

var _mainnet = require('./presets/mainnet.json');

var _mainnet2 = _interopRequireDefault(_mainnet);

var _browser = require('./presets/browser.json');

var _browser2 = _interopRequireDefault(_browser);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.intersection');

var _lodash4 = _interopRequireDefault(_lodash3);

var _index = require('./index');

var _constants = require('../utils/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ConfigPresetNotFoundError = function (_Error) {
  (0, _inherits3.default)(ConfigPresetNotFoundError, _Error);

  function ConfigPresetNotFoundError(message) {
    (0, _classCallCheck3.default)(this, ConfigPresetNotFoundError);
    return (0, _possibleConstructorReturn3.default)(this, (ConfigPresetNotFoundError.__proto__ || (0, _getPrototypeOf2.default)(ConfigPresetNotFoundError)).call(this, 'Cannot find configuration preset with name: ' + message));
  }

  return ConfigPresetNotFoundError;
}(Error);

var serviceRoles = ['accounts', 'allowance', 'cdp', 'conversion', 'exchange', 'gasEstimator', 'log', 'price', 'smartContract', 'timer', 'token', 'transactionManager', 'web3', 'nonce'];

function loadPreset(name) {
  if ((typeof name === 'undefined' ? 'undefined' : (0, _typeof3.default)(name)) == 'object') {
    return name; // for testing
  }

  var preset = void 0;
  switch (name) {
    case 'test':
      preset = _test2.default;
      break;
    case 'http':
      preset = _http2.default;
      break;
    case 'kovan':
      preset = _kovan2.default;
      break;
    case 'mainnet':
      preset = _mainnet2.default;
      break;
    case 'browser':
      preset = _browser2.default;
      break;
    default:
      throw new ConfigPresetNotFoundError(name);
  }
  // make a copy so we don't overwrite the original values
  return (0, _lodash2.default)({}, preset);
}

var reservedWords = ['accounts', 'overrideMetamask', 'plugins', 'privateKey', 'provider', 'url'];

var ConfigFactory = function () {
  function ConfigFactory() {
    (0, _classCallCheck3.default)(this, ConfigFactory);
  }

  (0, _createClass3.default)(ConfigFactory, null, [{
    key: 'create',

    /**
     * @param {string} preset
     * @param {object} options
     */
    value: function create(preset) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var resolver = arguments[2];

      if (typeof preset !== 'string') {
        options = preset;
        preset = options.preset;
      }

      var config = loadPreset(preset);
      var additionalServices = options.additionalServices || [];

      var usedReservedWords = (0, _lodash4.default)(additionalServices, reservedWords);
      if (usedReservedWords.length > 0) {
        throw new Error('The following words cannot be used as service role names: ' + usedReservedWords.join(', '));
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(serviceRoles.concat(additionalServices)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var role = _step.value;

          if (!(role in options)) continue;
          if (!(role in config)) {
            config[role] = options[role];
            continue;
          }
          config[role] = (0, _index.mergeServiceConfig)(role, config[role], options[role], resolver);
        }

        // web3-specific convenience options
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (config.web3) {
        var web3Settings = config.web3[1] || config.web3;
        if (!web3Settings.provider) web3Settings.provider = {};

        if (options.url) {
          web3Settings.provider.url = options.url;
        }

        if (options.provider) {
          (0, _lodash2.default)(web3Settings.provider, options.provider);
        }
      }

      // accounts-specific convenience option
      if (options.privateKey) {
        config.accounts = (0, _extends3.default)({}, config.accounts, {
          default: { type: _constants.AccountType.PRIVATE_KEY, key: options.privateKey }
        });
      }

      // default settings for transactions
      if (options.transactionSettings) {
        config.transactionSettings = options.transactionSettings;
      }

      return config;
    }
  }]);
  return ConfigFactory;
}();

exports.default = ConfigFactory;