'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PrivateService2 = require('../../core/PrivateService');

var _PrivateService3 = _interopRequireDefault(_PrivateService2);

var _OasisOrder = require('./OasisOrder');

var _TransactionObject = require('../../eth/TransactionObject');

var _TransactionObject2 = _interopRequireDefault(_TransactionObject);

var _contracts = require('../../../contracts/contracts');

var _contracts2 = _interopRequireDefault(_contracts);

var _constants = require('../../utils/constants');

var _Currency = require('../../eth/Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OasisExchangeService = function (_PrivateService) {
  (0, _inherits3.default)(OasisExchangeService, _PrivateService);

  function OasisExchangeService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'exchange';
    (0, _classCallCheck3.default)(this, OasisExchangeService);
    return (0, _possibleConstructorReturn3.default)(this, (OasisExchangeService.__proto__ || (0, _getPrototypeOf2.default)(OasisExchangeService)).call(this, name, ['cdp', 'smartContract', 'token', 'web3', 'log', 'gasEstimator', 'allowance', 'transactionManager']));
  }

  /*
  daiAmount: amount of Dai to sell
  currency: currency to buy
  minFillAmount: minimum amount of token being bought required.  If this can't be met, the trade will fail
  */


  (0, _createClass3.default)(OasisExchangeService, [{
    key: 'sellDai',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(amount, currency) {
        var minFillAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var oasisContract, daiToken, daiAddress, buyToken, daiAmountEVM, minFillAmountEVM;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                oasisContract = this.get('smartContract').getContractByName(_contracts2.default.MAKER_OTC, { hybrid: false });
                daiToken = this.get('token').getToken(_Currency.DAI);
                daiAddress = daiToken.address();
                buyToken = this.get('token').getToken(currency);
                daiAmountEVM = daiValueForContract(amount);
                minFillAmountEVM = daiValueForContract(minFillAmount);
                _context.next = 8;
                return this.get('allowance').requireAllowance(_Currency.DAI, oasisContract.address);

              case 8:
                return _context.abrupt('return', _OasisOrder.OasisSellOrder.build(oasisContract, oasisContract.sellAllAmount(daiAddress, daiAmountEVM, buyToken.address(), minFillAmountEVM, { gasLimit: 300000 }), this.get('transactionManager'), currency));

              case 9:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function sellDai(_x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return sellDai;
    }()

    /*
    daiAmount: amount of Dai to buy
    tokenSymbol: symbol of token to sell
    maxFillAmount: If the trade can't be done without selling more than the maxFillAmount of selling token, it will fail
    */

  }, {
    key: 'buyDai',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(amount, tokenSymbol) {
        var maxFillAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.UINT256_MAX;
        var oasisContract, daiToken, daiAddress, daiAmountEVM, maxFillAmountEVM, sellTokenAddress;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                oasisContract = this.get('smartContract').getContractByName(_contracts2.default.MAKER_OTC, { hybrid: false });
                daiToken = this.get('token').getToken(_Currency.DAI);
                daiAddress = daiToken.address();
                daiAmountEVM = daiValueForContract(amount);
                maxFillAmountEVM = daiValueForContract(maxFillAmount);
                sellTokenAddress = this.get('token').getToken(tokenSymbol).address();
                _context2.next = 8;
                return this.get('allowance').requireAllowance(_Currency.WETH, oasisContract.address);

              case 8:
                return _context2.abrupt('return', _OasisOrder.OasisBuyOrder.build(oasisContract, oasisContract.buyAllAmount(daiAddress, daiAmountEVM, sellTokenAddress, maxFillAmountEVM, { gasLimit: 300000 }), this.get('transactionManager')));

              case 9:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function buyDai(_x5, _x6) {
        return _ref2.apply(this, arguments);
      }

      return buyDai;
    }()

    //only used to set up a limit order on the local testnet

  }, {
    key: 'offer',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(payAmount, payTokenAddress, buyAmount, buyTokenAddress, pos, overrides) {
        var oasisContract;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                oasisContract = this.get('smartContract').getContractByName(_contracts2.default.MAKER_OTC, { hybrid: false });
                return _context3.abrupt('return', new _TransactionObject2.default(oasisContract.offer(payAmount, payTokenAddress, buyAmount, buyTokenAddress, pos, overrides), this.get('web3'), this.get('transactionManager').get('nonce')));

              case 2:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function offer(_x8, _x9, _x10, _x11, _x12, _x13) {
        return _ref3.apply(this, arguments);
      }

      return offer;
    }()
  }]);
  return OasisExchangeService;
}(_PrivateService3.default);

exports.default = OasisExchangeService;


function daiValueForContract(amount) {
  return (0, _Currency.getCurrency)(amount, _Currency.DAI).toEthersBigNumber('wei');
}