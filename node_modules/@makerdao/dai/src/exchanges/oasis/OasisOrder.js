'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OasisSellOrder = exports.OasisBuyOrder = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _ethers = require('ethers');

var _Currency = require('../../eth/Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OasisOrder = function () {
  function OasisOrder() {
    (0, _classCallCheck3.default)(this, OasisOrder);

    this._fillAmount = null;
    this._hybrid = null;
  }

  (0, _createClass3.default)(OasisOrder, [{
    key: 'fillAmount',
    value: function fillAmount() {
      return this._fillAmount;
    }
  }, {
    key: 'fees',
    value: function fees() {
      return this._hybrid.getOriginalTransaction().fees();
    }
  }, {
    key: 'created',
    value: function created() {
      return this._hybrid.getOriginalTransaction().timestamp();
    }
  }, {
    key: 'transact',
    value: function transact(oasisContract, transaction, transactionManager) {
      var _this = this;

      return transactionManager.createHybridTx(transaction, {
        businessObject: this,
        parseLogs: function parseLogs(receiptLogs) {
          var LogTradeEvent = oasisContract.interface.events.LogTrade;
          var LogTradeTopic = _ethers.utils.keccak256(transactionManager.get('web3')._web3.toHex(LogTradeEvent.signature)); //find a way to convert string to hex without web3
          var receiptEvents = receiptLogs.filter(function (e) {
            return e.topics[0].toLowerCase() === LogTradeTopic.toLowerCase() && e.address.toLowerCase() === oasisContract.address.toLowerCase();
          });
          var total = _ethers.utils.bigNumberify('0');
          receiptEvents.forEach(function (event) {
            var parsedLog = LogTradeEvent.parse(event.data);
            total = total.add(parsedLog[_this._logKey]);
          });
          _this._fillAmount = _this._unit.wei(total.toString());
        }
      });
    }
  }]);
  return OasisOrder;
}();

exports.default = OasisOrder;

var OasisBuyOrder = exports.OasisBuyOrder = function (_OasisOrder) {
  (0, _inherits3.default)(OasisBuyOrder, _OasisOrder);

  function OasisBuyOrder() {
    (0, _classCallCheck3.default)(this, OasisBuyOrder);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (OasisBuyOrder.__proto__ || (0, _getPrototypeOf2.default)(OasisBuyOrder)).call(this));

    _this2._logKey = 'buy_amt';
    _this2._unit = _Currency.DAI;
    return _this2;
  }

  (0, _createClass3.default)(OasisBuyOrder, null, [{
    key: 'build',
    value: function build(oasisContract, transaction, transactionManager) {
      var order = new OasisBuyOrder();
      order._hybrid = order.transact(oasisContract, transaction, transactionManager);
      return order._hybrid;
    }
  }]);
  return OasisBuyOrder;
}(OasisOrder);

var OasisSellOrder = exports.OasisSellOrder = function (_OasisOrder2) {
  (0, _inherits3.default)(OasisSellOrder, _OasisOrder2);

  function OasisSellOrder(currency) {
    (0, _classCallCheck3.default)(this, OasisSellOrder);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (OasisSellOrder.__proto__ || (0, _getPrototypeOf2.default)(OasisSellOrder)).call(this));

    _this3._logKey = 'pay_amt';
    _this3._unit = currency;
    return _this3;
  }

  (0, _createClass3.default)(OasisSellOrder, null, [{
    key: 'build',
    value: function build(oasisContract, transaction, transactionManager, currency) {
      var order = new OasisSellOrder(currency);
      order._hybrid = order.transact(oasisContract, transaction, transactionManager);
      return order._hybrid;
    }
  }]);
  return OasisSellOrder;
}(OasisOrder);