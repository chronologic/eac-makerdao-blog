'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _DefaultServiceProvider = require('./config/DefaultServiceProvider');

var _DefaultServiceProvider2 = _interopRequireDefault(_DefaultServiceProvider);

var _ConfigFactory = require('./config/ConfigFactory');

var _ConfigFactory2 = _interopRequireDefault(_ConfigFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Maker = function () {
  function Maker(preset) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Maker);

    var config = _ConfigFactory2.default.create(preset, options, _DefaultServiceProvider.resolver);
    this._container = new _DefaultServiceProvider2.default(config).buildContainer();
    if (options.plugins) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(options.plugins), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var plugin = _step.value;

          plugin(this, config);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    if (options.autoAuthenticate !== false) this.authenticate();

    delegateToServices(this, {
      accounts: ['addAccount', 'currentAccount', 'currentAddress', 'listAccounts', 'useAccount'],
      cdp: ['getCdp', 'openCdp'],
      event: ['on'],
      token: ['getToken']
    });
  }

  (0, _createClass3.default)(Maker, [{
    key: 'authenticate',
    value: function authenticate() {
      if (!this._authenticatedPromise) {
        this._authenticatedPromise = this._container.authenticate();
      }
      return this._authenticatedPromise;
    }

    // skipAuthCheck should only be set if you're sure you don't need the service
    // to be initialized yet, e.g. when setting up a plugin

  }, {
    key: 'service',
    value: function service(_service, skipAuthCheck) {
      if (!skipAuthCheck && !this._container.isAuthenticated) {
        throw new Error('this.authenticate() did not finish yet.');
      }
      return this._container.service(_service);
    }
  }]);
  return Maker;
}();

exports.default = Maker;


function delegateToServices(maker, services) {
  var _loop = function _loop(serviceName) {
    var _loop2 = function _loop2(methodName) {
      maker[methodName] = function () {
        var _maker$service;

        return (_maker$service = maker.service(serviceName))[methodName].apply(_maker$service, arguments);
      };
    };

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = (0, _getIterator3.default)(services[serviceName]), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var methodName = _step2.value;

        _loop2(methodName);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  };

  for (var serviceName in services) {
    _loop(serviceName);
  }
}

// This factory function doesn't do much at the moment, but it will give us
// more flexibility for plugins and extensions in the future.
Maker.create = function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new (Function.prototype.bind.apply(Maker, [null].concat(args)))();
};