'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependencyNotResolvedError = exports.UnknownDependencyError = exports.InvalidServiceError = exports.default = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _ServiceManagerBase2 = require('./ServiceManagerBase');

var _ServiceManagerBase3 = _interopRequireDefault(_ServiceManagerBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 */
var InvalidServiceError = function (_Error) {
  (0, _inherits3.default)(InvalidServiceError, _Error);

  function InvalidServiceError(message) {
    (0, _classCallCheck3.default)(this, InvalidServiceError);
    return (0, _possibleConstructorReturn3.default)(this, (InvalidServiceError.__proto__ || (0, _getPrototypeOf2.default)(InvalidServiceError)).call(this, message));
  }

  return InvalidServiceError;
}(Error);

/**
 *
 */


var UnknownDependencyError = function (_Error2) {
  (0, _inherits3.default)(UnknownDependencyError, _Error2);

  function UnknownDependencyError(service, dependency) {
    (0, _classCallCheck3.default)(this, UnknownDependencyError);
    return (0, _possibleConstructorReturn3.default)(this, (UnknownDependencyError.__proto__ || (0, _getPrototypeOf2.default)(UnknownDependencyError)).call(this, 'Injected service ' + dependency + ' is not a dependency of ' + service));
  }

  return UnknownDependencyError;
}(Error);

/**
 *
 */


var DependencyNotResolvedError = function (_Error3) {
  (0, _inherits3.default)(DependencyNotResolvedError, _Error3);

  function DependencyNotResolvedError(service, dependency) {
    (0, _classCallCheck3.default)(this, DependencyNotResolvedError);
    return (0, _possibleConstructorReturn3.default)(this, (DependencyNotResolvedError.__proto__ || (0, _getPrototypeOf2.default)(DependencyNotResolvedError)).call(this, 'Dependency ' + dependency + ' of service ' + service + ' is unavailable.'));
  }

  return DependencyNotResolvedError;
}(Error);

/**
 * @param callback
 * @returns {Promise}
 * @private
 */


function _waitForDependencies(callback) {
  return _promise2.default.all(this.dependencies().map(function (dependency) {
    return callback(dependency);
  }));
}

/**
 *
 */

var ServiceManager = function (_ServiceManagerBase) {
  (0, _inherits3.default)(ServiceManager, _ServiceManagerBase);
  (0, _createClass3.default)(ServiceManager, null, [{
    key: 'isValidService',

    /**
     * @param {*} service
     * @returns {boolean}
     */
    value: function isValidService(service) {
      return service !== null && (typeof service === 'undefined' ? 'undefined' : (0, _typeof3.default)(service)) === 'object' && typeof service.manager === 'function' && service.manager() instanceof ServiceManager;
    }

    /**
     * @param {string} name
     * @param {string[]} dependencies
     * @param {function|null} init
     * @param {function|null} connect
     * @param {function|null} auth
     */

  }]);

  function ServiceManager(name) {
    var dependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var init = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var connect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var auth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    (0, _classCallCheck3.default)(this, ServiceManager);

    var _this4 = (0, _possibleConstructorReturn3.default)(this, (ServiceManager.__proto__ || (0, _getPrototypeOf2.default)(ServiceManager)).call(this, init, connect, auth));

    if (!name) {
      throw new Error('Service name must not be empty.');
    }

    _this4._name = name;
    _this4._dependencies = dependencies;
    _this4._injections = {};
    dependencies.forEach(function (d) {
      return _this4._injections[d] = null;
    });
    return _this4;
  }

  (0, _createClass3.default)(ServiceManager, [{
    key: 'name',
    value: function name() {
      return this._name;
    }
  }, {
    key: 'dependencies',
    value: function dependencies() {
      return this._dependencies;
    }
  }, {
    key: 'inject',
    value: function inject(dependency, service) {
      if (typeof this._injections[dependency] === 'undefined') {
        throw new UnknownDependencyError(this.name(), dependency);
      }

      if (!ServiceManager.isValidService(service)) {
        throw new InvalidServiceError('Cannot inject invalid service in ' + this.name());
      }

      this._injections[dependency] = service;

      return this;
    }
  }, {
    key: 'dependency',
    value: function dependency(name) {
      if (this._injections[name] === null) {
        throw new DependencyNotResolvedError(this.name(), name);
      }

      return this._injections[name];
    }
  }, {
    key: 'initialize',
    value: function initialize() {
      var _this5 = this;

      return this.initializeDependencies().then(function () {
        return (0, _get3.default)(ServiceManager.prototype.__proto__ || (0, _getPrototypeOf2.default)(ServiceManager.prototype), 'initialize', _this5).call(_this5, _this5._settings);
      });
    }
  }, {
    key: 'connect',
    value: function connect() {
      var _this6 = this;

      return this.connectDependencies().then(function () {
        return (0, _get3.default)(ServiceManager.prototype.__proto__ || (0, _getPrototypeOf2.default)(ServiceManager.prototype), 'connect', _this6).call(_this6);
      });
    }
  }, {
    key: 'authenticate',
    value: function authenticate() {
      var _this7 = this;

      return this.authenticateDependencies().then(function () {
        return (0, _get3.default)(ServiceManager.prototype.__proto__ || (0, _getPrototypeOf2.default)(ServiceManager.prototype), 'authenticate', _this7).call(_this7);
      });
    }
  }, {
    key: 'initializeDependencies',
    value: function initializeDependencies() {
      var _this8 = this;

      return _waitForDependencies.call(this, function (d) {
        return _this8.dependency(d).manager().initialize();
      });
    }
  }, {
    key: 'connectDependencies',
    value: function connectDependencies() {
      var _this9 = this;

      return _waitForDependencies.call(this, function (d) {
        return _this9.dependency(d).manager().connect();
      });
    }
  }, {
    key: 'authenticateDependencies',
    value: function authenticateDependencies() {
      var _this10 = this;

      return _waitForDependencies.call(this, function (d) {
        return _this10.dependency(d).manager().authenticate();
      });
    }
  }, {
    key: 'createService',
    value: function createService() {
      var _this11 = this;

      return { manager: function manager() {
          return _this11;
        } };
    }
  }]);
  return ServiceManager;
}(_ServiceManagerBase3.default);

exports.default = ServiceManager;
exports.InvalidServiceError = InvalidServiceError;
exports.UnknownDependencyError = UnknownDependencyError;
exports.DependencyNotResolvedError = DependencyNotResolvedError;