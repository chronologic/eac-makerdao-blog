'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServiceDependencyLoopError = exports.ServiceNotFoundError = exports.ServiceAlreadyRegisteredError = exports.InvalidServiceError = exports.default = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.orderServices = orderServices;

var _lodash = require('lodash.values');

var _lodash2 = _interopRequireDefault(_lodash);

var _ServiceManager = require('./ServiceManager');

var _ServiceManager2 = _interopRequireDefault(_ServiceManager);

var _toposort = require('toposort');

var _toposort2 = _interopRequireDefault(_toposort);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ServiceAlreadyRegisteredError = function (_Error) {
  (0, _inherits3.default)(ServiceAlreadyRegisteredError, _Error);

  function ServiceAlreadyRegisteredError(name) {
    (0, _classCallCheck3.default)(this, ServiceAlreadyRegisteredError);

    // prettier-ignore
    return (0, _possibleConstructorReturn3.default)(this, (ServiceAlreadyRegisteredError.__proto__ || (0, _getPrototypeOf2.default)(ServiceAlreadyRegisteredError)).call(this, 'Service with name \'' + name + '\' is already registered with this container.'));
  }

  return ServiceAlreadyRegisteredError;
}(Error);

var ServiceNotFoundError = function (_Error2) {
  (0, _inherits3.default)(ServiceNotFoundError, _Error2);

  function ServiceNotFoundError(name) {
    (0, _classCallCheck3.default)(this, ServiceNotFoundError);

    // prettier-ignore
    return (0, _possibleConstructorReturn3.default)(this, (ServiceNotFoundError.__proto__ || (0, _getPrototypeOf2.default)(ServiceNotFoundError)).call(this, 'Service with name \'' + name + '\' cannot be found in this container.'));
  }

  return ServiceNotFoundError;
}(Error);

var ServiceDependencyLoopError = function (_Error3) {
  (0, _inherits3.default)(ServiceDependencyLoopError, _Error3);

  function ServiceDependencyLoopError(names) {
    (0, _classCallCheck3.default)(this, ServiceDependencyLoopError);
    return (0, _possibleConstructorReturn3.default)(this, (ServiceDependencyLoopError.__proto__ || (0, _getPrototypeOf2.default)(ServiceDependencyLoopError)).call(this, 'Service dependency loop in {' + names.join(', ') + '}'));
  }

  return ServiceDependencyLoopError;
}(Error);

// exported just for testing


function orderServices(services) {
  var edges = [];

  var _loop = function _loop(service) {
    var name = service.manager().name();
    var depNames = service.manager().dependencies();
    depNames.forEach(function (dn) {
      return edges.push([dn, name]);
    });
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(services), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var service = _step.value;

      _loop(service);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return (0, _toposort2.default)(edges);
}

var Container = function () {
  function Container() {
    (0, _classCallCheck3.default)(this, Container);

    this._services = {};
  }

  (0, _createClass3.default)(Container, [{
    key: 'register',
    value: function register(service) {
      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (!_ServiceManager2.default.isValidService(service)) {
        throw new _ServiceManager.InvalidServiceError('Service must be an object with manager() method returning a valid ServiceManager');
      }

      name = name || service.manager().name();

      var s = this.service(name, false);
      if (s !== undefined && s !== service) {
        throw new ServiceAlreadyRegisteredError(name);
      }

      this._services[name] = service;
      return this;
    }

    // export just this function

  }, {
    key: 'service',
    value: function service(name) {
      var throwIfMissing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (!name) {
        throw new Error('Provide a service name.');
      }

      if (!this._services[name] && throwIfMissing) {
        throw new ServiceNotFoundError(name);
      }

      return this._services[name];
    }
  }, {
    key: 'getRegisteredServiceNames',
    value: function getRegisteredServiceNames() {
      return (0, _keys2.default)(this._services);
    }
  }, {
    key: 'injectDependencies',
    value: function injectDependencies() {
      var services = (0, _lodash2.default)(this._services);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, _getIterator3.default)(services), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var service = _step2.value;

          var manager = service.manager();
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = (0, _getIterator3.default)(manager.dependencies()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _name = _step3.value;

              var dep = this._services[_name];
              if (!dep) throw new ServiceNotFoundError(_name);
              manager.inject(_name, this._services[_name]);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'initialize',
    value: function initialize() {
      return this._waitForServices(function (s) {
        return s.manager().initialize();
      });
    }
  }, {
    key: 'connect',
    value: function connect() {
      return this._waitForServices(function (s) {
        return s.manager().connect();
      });
    }
  }, {
    key: 'authenticate',
    value: function authenticate() {
      var _this4 = this;

      return this._waitForServices(function (s) {
        return s.manager().authenticate();
      }).then(function () {
        _this4.isAuthenticated = true;
      });
    }
  }, {
    key: '_waitForServices',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(callback) {
        var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _name2, service;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this._orderedServiceNames) {
                  this._orderedServiceNames = orderServices((0, _lodash2.default)(this._services));
                }
                _iteratorNormalCompletion4 = true;
                _didIteratorError4 = false;
                _iteratorError4 = undefined;
                _context.prev = 4;
                _iterator4 = (0, _getIterator3.default)(this._orderedServiceNames);

              case 6:
                if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                  _context.next = 16;
                  break;
                }

                _name2 = _step4.value;
                service = this._services[_name2];

                if (service) {
                  _context.next = 11;
                  break;
                }

                throw new Error('No service for ' + _name2);

              case 11:
                _context.next = 13;
                return callback(this._services[_name2]);

              case 13:
                _iteratorNormalCompletion4 = true;
                _context.next = 6;
                break;

              case 16:
                _context.next = 22;
                break;

              case 18:
                _context.prev = 18;
                _context.t0 = _context['catch'](4);
                _didIteratorError4 = true;
                _iteratorError4 = _context.t0;

              case 22:
                _context.prev = 22;
                _context.prev = 23;

                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }

              case 25:
                _context.prev = 25;

                if (!_didIteratorError4) {
                  _context.next = 28;
                  break;
                }

                throw _iteratorError4;

              case 28:
                return _context.finish(25);

              case 29:
                return _context.finish(22);

              case 30:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 18, 22, 30], [23,, 25, 29]]);
      }));

      function _waitForServices(_x3) {
        return _ref.apply(this, arguments);
      }

      return _waitForServices;
    }()
  }]);
  return Container;
}();

exports.default = Container;
exports.InvalidServiceError = _ServiceManager.InvalidServiceError;
exports.ServiceAlreadyRegisteredError = ServiceAlreadyRegisteredError;
exports.ServiceNotFoundError = ServiceNotFoundError;
exports.ServiceDependencyLoopError = ServiceDependencyLoopError;