'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IllegalStateError = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IllegalStateError = exports.IllegalStateError = function (_Error) {
  (0, _inherits3.default)(IllegalStateError, _Error);

  function IllegalStateError() {
    (0, _classCallCheck3.default)(this, IllegalStateError);
    return (0, _possibleConstructorReturn3.default)(this, (IllegalStateError.__proto__ || (0, _getPrototypeOf2.default)(IllegalStateError)).apply(this, arguments));
  }

  return IllegalStateError;
}(Error);

var StateMachine = function () {
  function StateMachine(initialState, transitions) {
    (0, _classCallCheck3.default)(this, StateMachine);

    if ((typeof transitions === 'undefined' ? 'undefined' : (0, _typeof3.default)(transitions)) !== 'object') {
      throw new Error('StateMachine transitions parameter must be an object.');
    }

    if ((0, _keys2.default)(transitions).filter(function (k) {
      return transitions.hasOwnProperty(k) && !(transitions[k] instanceof Array);
    }).length > 0) {
      throw new Error('Illegal StateMachine transition found: not an array.');
    }

    if ((0, _keys2.default)(transitions).filter(function (k) {
      return transitions.hasOwnProperty(k) && transitions[k].filter(function (s) {
        return !transitions[s];
      }).length > 0;
    }).length > 0) {
      throw new Error('Illegal StateMachine transition found: target state not in transition map.');
    }

    if (!(transitions[initialState] instanceof Array)) {
      throw new Error('Initial state ' + initialState + ' is not set in the transitions map.');
    }

    this._state = initialState;
    this._nextStates = transitions;
    this._stateChangedHandlers = [];
  }

  (0, _createClass3.default)(StateMachine, [{
    key: 'onStateChanged',
    value: function onStateChanged(callback) {
      this._stateChangedHandlers.push(callback);
    }
  }, {
    key: 'state',
    value: function state() {
      return this._state;
    }
  }, {
    key: 'inState',
    value: function inState(state) {
      if (!(state instanceof Array)) {
        state = [state];
      }

      return state.indexOf(this._state) >= 0;
    }
  }, {
    key: 'assertState',
    value: function assertState(state) {
      var operation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (!this.inState(state)) {
        throw new IllegalStateError('Illegal operation for state ' + this._state + (operation.length > 0 ? ': ' + operation : ''));
      }
    }
  }, {
    key: 'transitionTo',
    value: function transitionTo(newState) {
      if (this._nextStates[newState] === undefined) {
        throw new IllegalStateError('Cannot set illegal state: ' + newState);
      }

      if (newState !== this._state) {
        if (this._nextStates[this._state].indexOf(newState) < 0) {
          throw new IllegalStateError('Illegal state transition: ' + this._state + ' to ' + newState);
        }

        var oldState = this._state;
        this._state = newState;
        this._stateChangedHandlers.forEach(function (cb) {
          return cb(oldState, newState);
        });
      }

      return this;
    }
  }]);
  return StateMachine;
}();

exports.default = StateMachine;