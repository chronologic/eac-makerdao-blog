'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _LocalService2 = require('../core/LocalService');

var _LocalService3 = _interopRequireDefault(_LocalService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CacheService = function (_LocalService) {
  (0, _inherits3.default)(CacheService, _LocalService);

  function CacheService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cache';
    (0, _classCallCheck3.default)(this, CacheService);
    return (0, _possibleConstructorReturn3.default)(this, (CacheService.__proto__ || (0, _getPrototypeOf2.default)(CacheService)).call(this, name));
  }

  (0, _createClass3.default)(CacheService, [{
    key: 'initialize',
    value: function initialize() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (settings.storage) {
        this._storage = settings.storage;
      }
    }
  }, {
    key: 'isEnabled',
    value: function isEnabled() {
      return !!this._storage;
    }
  }, {
    key: 'has',
    value: function has(key) {
      return !!this._storage && key in this._storage;
    }
  }, {
    key: 'fetch',
    value: function fetch(key) {
      return this._storage ? this._storage[key] : undefined;
    }
  }, {
    key: 'store',
    value: function store(key, value) {
      if (this._storage) this._storage[key] = value;
    }
  }]);
  return CacheService;
}(_LocalService3.default);

exports.default = CacheService;