'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.captureConsole = captureConsole;
exports.promisify = promisify;
exports.promisifyMethods = promisifyMethods;
exports.getNetworkName = getNetworkName;
exports.slug = slug;
exports.promiseWait = promiseWait;

var _networks = require('../../contracts/networks');

var _networks2 = _interopRequireDefault(_networks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function captureConsole(cb) {
  // eslint-disable-next-line
  var origConsoleLog = console.log,
      output = [];

  // eslint-disable-next-line
  console.log = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args.forEach(function (a) {
      return output.push(a);
    });
  };

  cb();

  // eslint-disable-next-line
  console.log = origConsoleLog;
}

function promisify(fn) {
  return function () {
    var _this = this;

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return new _promise2.default(function (resolve, reject) {
      fn.apply(_this, args.concat(function (err, value) {
        return err ? reject(err) : resolve(value);
      }));
    });
  };
}

function promisifyMethods(target, methods) {
  return methods.reduce(function (output, method) {
    output[method] = promisify.call(target, target[method]);
    return output;
  }, {});
}

function getNetworkName(networkId) {
  var result = _networks2.default.filter(function (n) {
    return n.networkId === networkId;
  });

  if (result.length < 1) {
    throw new Error('No network with ID ' + networkId + ' found.');
  }

  return result[0].name;
}

function slug() {
  return '-' + Math.random().toString(36).substring(2, 7) + Math.random().toString(36).substring(2, 7);
}

function promiseWait(ms) {
  return new _promise2.default(function (resolve) {
    return setTimeout(resolve, ms);
  });
}