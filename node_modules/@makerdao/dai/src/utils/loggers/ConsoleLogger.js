'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PrivateService2 = require('../../core/PrivateService');

var _PrivateService3 = _interopRequireDefault(_PrivateService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ConsoleLogger = function (_PrivateService) {
  (0, _inherits3.default)(ConsoleLogger, _PrivateService);

  /**
   * @param {string} name
   */
  function ConsoleLogger() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'log';
    (0, _classCallCheck3.default)(this, ConsoleLogger);
    return (0, _possibleConstructorReturn3.default)(this, (ConsoleLogger.__proto__ || (0, _getPrototypeOf2.default)(ConsoleLogger)).call(this, name));
  }

  (0, _createClass3.default)(ConsoleLogger, [{
    key: 'debug',
    value: function debug() {
      var _console;

      (_console = console).log.apply(_console, arguments);
    }
  }, {
    key: 'info',
    value: function info() {
      var _console2;

      (_console2 = console).info.apply(_console2, arguments);
    }
  }, {
    key: 'warn',
    value: function warn() {
      var _console3;

      (_console3 = console).warn.apply(_console3, arguments);
    }
  }, {
    key: 'error',
    value: function error() {
      var _console4;

      (_console4 = console).error.apply(_console4, arguments);
    }
  }, {
    key: 'trace',
    value: function trace() {
      var _console5;

      (_console5 = console).trace.apply(_console5, arguments);
    }
  }]);
  return ConsoleLogger;
}(_PrivateService3.default); /* eslint-disable */


exports.default = ConsoleLogger;