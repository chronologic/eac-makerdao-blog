'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _ServiceManager = require('../../core/ServiceManager');

var _ServiceManager2 = _interopRequireDefault(_ServiceManager);

var _LocalService2 = require('../../core/LocalService');

var _LocalService3 = _interopRequireDefault(_LocalService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = function _() {};

var NullLogger = function (_LocalService) {
  (0, _inherits3.default)(NullLogger, _LocalService);

  /**
   * @param {string} name
   */
  function NullLogger() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'log';
    (0, _classCallCheck3.default)(this, NullLogger);
    return (0, _possibleConstructorReturn3.default)(this, (NullLogger.__proto__ || (0, _getPrototypeOf2.default)(NullLogger)).call(this, name));
  }

  /**
   * @param {object} service
   * @returns {object}
   */


  (0, _createClass3.default)(NullLogger, [{
    key: 'serviceLogger',
    value: function serviceLogger(service) {
      if (!_ServiceManager2.default.isValidService(service)) {
        throw new Error('Invalid service object');
      }

      return { trace: _, debug: _, info: _, warn: _, error: _, fatal: _ };
    }
  }, {
    key: 'trace',
    value: function trace() {}
  }, {
    key: 'debug',
    value: function debug() {}
  }, {
    key: 'info',
    value: function info() {}
  }, {
    key: 'warn',
    value: function warn() {}
  }, {
    key: 'error',
    value: function error() {}
  }, {
    key: 'fatal',
    value: function fatal() {}
  }]);
  return NullLogger;
}(_LocalService3.default);

exports.default = NullLogger;