'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _helpers = require('./helpers');

var _eventemitter = require('eventemitter2');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter2 = _eventemitter2.default.EventEmitter2;

var EventEmitter = function () {
  function EventEmitter(disposeSelf) {
    (0, _classCallCheck3.default)(this, EventEmitter);

    this._emitter = new EventEmitter2({
      wildcard: true,
      delimiter: '/'
    });
    this._polls = [];
    this._block = null;
    this._sequenceNum = 1;
    this._disposeSelf = disposeSelf;
    this.emit = this.emit.bind(this);
  }

  (0, _createClass3.default)(EventEmitter, [{
    key: 'emit',
    value: function emit(event) {
      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var block = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getBlock();

      // if nobody's listening for this event, don't actually emit it
      if (this._emitter.listeners(event).length === 0) return;
      var eventObj = {
        payload: payload,
        block: block,
        type: event,
        sequence: this._sequenceNum
      };
      this._sequenceNum++;
      this._emitter.emit(event, eventObj);
    }
  }, {
    key: 'on',
    value: function on(event, listener) {
      var _this = this;

      this._emitter.on(event, listener);
      // start polling for state changes if the associated event now has a listener
      this._polls.forEach(function (poll) {
        return _this._emitter.listeners(poll.type()).length > 0 && poll.heat();
      });
    }
  }, {
    key: 'removeListener',
    value: function removeListener(event, listener) {
      var _this2 = this;

      this._emitter.removeListener(event, listener);
      // stop polling for state changes if the associated event no longer has a listener
      this._polls.forEach(function (poll) {
        return _this2._emitter.listeners(poll.type()).length === 0 && poll.cool();
      });
    }
  }, {
    key: 'registerPollEvents',
    value: function registerPollEvents(eventPayloadMap) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(eventPayloadMap)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

          var eventType = _ref2[0];
          var payloadGetterMap = _ref2[1];

          var payloadFetcher = (0, _helpers.createPayloadFetcher)(payloadGetterMap);
          var memoizedPoll = (0, _helpers.createMemoizedPoll)({
            type: eventType,
            emit: this.emit,
            getState: payloadFetcher
          });
          this._polls.push(memoizedPoll);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'ping',
    value: function ping(block) {
      this._setBlock(block);
      this._polls.forEach(function (poll) {
        return poll.ping();
      });
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.emit = function () {};
      this.on = function () {};
      this._disposeSelf();
    }
  }, {
    key: '_setBlock',
    value: function _setBlock(block) {
      if (block !== undefined) this._block = block;
    }
  }, {
    key: '_getBlock',
    value: function _getBlock() {
      return this._block;
    }

    // For testing

  }, {
    key: '_startPolls',
    value: function _startPolls() {
      this._polls.forEach(function (poll) {
        return poll.heat();
      });
    }
  }, {
    key: '_stopPolls',
    value: function _stopPolls() {
      this._polls.forEach(function (poll) {
        return poll.cool();
      });
    }
  }]);
  return EventEmitter;
}();

exports.default = EventEmitter;