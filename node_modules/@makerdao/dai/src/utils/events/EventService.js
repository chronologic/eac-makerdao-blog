'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PrivateService2 = require('../../core/PrivateService');

var _PrivateService3 = _interopRequireDefault(_PrivateService2);

var _index = require('../index');

var _EventEmitter = require('./EventEmitter');

var _EventEmitter2 = _interopRequireDefault(_EventEmitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventService = function (_PrivateService) {
  (0, _inherits3.default)(EventService, _PrivateService);

  /**
   * @param {string} name
   */
  function EventService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'event';
    (0, _classCallCheck3.default)(this, EventService);

    var _this = (0, _possibleConstructorReturn3.default)(this, (EventService.__proto__ || (0, _getPrototypeOf2.default)(EventService)).call(this, name, ['log']));

    _this._block = null;
    // all of our emitters â€“ we can have many of these
    // e.g. one for our maker object, a couple for some cdp objects, a few more on transaction objects, etc
    _this.emitters = {};

    // this is our default emitter, it will likely be the maker object's personal emitter
    _this.buildEmitter({ defaultEmitter: true });

    _this.ping = _this.ping.bind(_this);
    return _this;
  }

  // check all of our active polls for new state
  // this is currently called on every new block from Web3Service


  (0, _createClass3.default)(EventService, [{
    key: 'ping',
    value: function ping(block) {
      (0, _values2.default)(this.emitters).forEach(function (emitter) {
        return emitter.ping(block);
      });
    }

    // add a event listener to an emitter

  }, {
    key: 'on',
    value: function on(event, listener) {
      var emitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultEmitter();

      emitter.on(event, listener);
    }

    // push an event through an emitter

  }, {
    key: 'emit',
    value: function emit(event, payload, block) {
      var emitter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._defaultEmitter();

      emitter.emit(event, payload, block);
    }

    // remove a listener from an emitter

  }, {
    key: 'removeListener',
    value: function removeListener(event, listener) {
      var emitter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._defaultEmitter();

      emitter.removeListener(event, listener);
    }
  }, {
    key: 'registerPollEvents',
    value: function registerPollEvents(eventPayloadMap) {
      var emitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._defaultEmitter();

      return emitter.registerPollEvents(eventPayloadMap);
    }
  }, {
    key: 'buildEmitter',
    value: function buildEmitter() {
      var _this2 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$defaultEmitter = _ref.defaultEmitter,
          defaultEmitter = _ref$defaultEmitter === undefined ? false : _ref$defaultEmitter;

      var id = defaultEmitter ? 'default' : (0, _index.slug)();
      var disposeEmitter = this._disposeEmitter.bind(this, id);
      var newEmitter = new _EventEmitter2.default(disposeEmitter);
      newEmitter.on('error', function (eventObj) {
        return _this2._logError(id, eventObj.payload);
      });
      this.emitters[id] = newEmitter;
      return newEmitter;
    }
  }, {
    key: '_disposeEmitter',
    value: function _disposeEmitter(id) {
      if (id === 'default') {
        this._logError(id, 'cannot dispose default emitter');
      } else delete this.emitters[id];
    }
  }, {
    key: '_defaultEmitter',
    value: function _defaultEmitter() {
      return this.emitters.default;
    }
  }, {
    key: '_logError',
    value: function _logError(name, msg) {
      this.get('log').error('Problem encountered in emitter ' + name + ' -> ' + msg);
    }
  }]);
  return EventService;
}(_PrivateService3.default);

exports.default = EventService;