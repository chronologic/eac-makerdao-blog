'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMemoizedPoll = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.createPayloadFetcher = createPayloadFetcher;

var _lodash = require('lodash.isequal');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//////////////////////////////
/////  Polling Helpers  //////
//////////////////////////////

function createPayloadFetcher(payloadGetterMap) {
  return function () {
    return _promise2.default.all((0, _entries2.default)(payloadGetterMap).map(function (_ref) {
      var _ref2 = (0, _slicedToArray3.default)(_ref, 2),
          key = _ref2[0],
          getter = _ref2[1];

      return getter().then(function (state) {
        return [key, state];
      });
    })).then(function (states) {
      var payload = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(states), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref3 = _step.value;

          var _ref4 = (0, _slicedToArray3.default)(_ref3, 2);

          var key = _ref4[0];
          var state = _ref4[1];

          payload[key] = state;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return payload;
    });
  };
}

function createMemoizedPoll(_ref5) {
  var _type = _ref5.type,
      getState = _ref5.getState,
      emit = _ref5.emit,
      _ref5$curr = _ref5.curr,
      curr = _ref5$curr === undefined ? {} : _ref5$curr,
      _ref5$live = _ref5.live,
      _live = _ref5$live === undefined ? false : _ref5$live;

  return {
    ping: function ping() {
      var _this = this;

      return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var next, msg;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (_live) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt('return');

              case 2:
                _context.prev = 2;
                _context.next = 5;
                return getState();

              case 5:
                next = _context.sent;

                if (!(0, _lodash2.default)(curr, next)) {
                  emit(_type, next);
                  curr = next;
                }
                _context.next = 13;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context['catch'](2);
                msg = 'Failed to get latest ' + _type + ' state. Message -> ' + _context.t0;

                emit('error', msg);

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this, [[2, 9]]);
      }))();
    },
    heat: function heat() {
      var _this2 = this;

      return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var msg;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!_live) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt('return');

              case 2:
                _context2.prev = 2;
                _context2.next = 5;
                return getState();

              case 5:
                curr = _context2.sent;

                _live = true;
                _context2.next = 13;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2['catch'](2);
                msg = 'Failed to get initial ' + _type + ' state. Message -> ' + _context2.t0;

                emit('error', msg);

              case 13:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this2, [[2, 9]]);
      }))();
    },
    cool: function cool() {
      if (!_live) return;
      _live = false;
    },
    type: function type() {
      return _type;
    },
    live: function live() {
      return _live;
    }
  };
}
exports.createMemoizedPoll = createMemoizedPoll;