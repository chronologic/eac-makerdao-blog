'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PublicService2 = require('../core/PublicService');

var _PublicService3 = _interopRequireDefault(_PublicService2);

var _fp = require('lodash/fp');

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _factories = require('./accounts/factories');

var _setup = require('./accounts/setup');

var _constants = require('../utils/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AccountsService = function (_PublicService) {
  (0, _inherits3.default)(AccountsService, _PublicService);

  function AccountsService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'accounts';
    (0, _classCallCheck3.default)(this, AccountsService);

    var _this = (0, _possibleConstructorReturn3.default)(this, (AccountsService.__proto__ || (0, _getPrototypeOf2.default)(AccountsService)).call(this, name, []));

    _this._accounts = {};
    _this._accountFactories = {
      privateKey: _factories.privateKeyAccountFactory,
      provider: _factories.providerAccountFactory,
      browser: _factories.browserProviderAccountFactory
    };
    return _this;
  }

  (0, _createClass3.default)(AccountsService, [{
    key: 'initialize',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var result;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._settings = (0, _fp.omit)('web3', settings);

                _context.next = 3;
                return (0, _setup.setupEngine)(settings);

              case 3:
                result = _context.sent;

                this._engine = result.engine;
                this._provider = result.provider;

              case 6:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initialize() {
        return _ref.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: 'connect',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var accountNames, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, name;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                accountNames = (0, _keys2.default)(this._settings);
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 4;
                _iterator = (0, _getIterator3.default)(accountNames);

              case 6:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 13;
                  break;
                }

                name = _step.value;
                _context2.next = 10;
                return this.addAccount(name, this._settings[name]);

              case 10:
                _iteratorNormalCompletion = true;
                _context2.next = 6;
                break;

              case 13:
                _context2.next = 19;
                break;

              case 15:
                _context2.prev = 15;
                _context2.t0 = _context2['catch'](4);
                _didIteratorError = true;
                _iteratorError = _context2.t0;

              case 19:
                _context2.prev = 19;
                _context2.prev = 20;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 22:
                _context2.prev = 22;

                if (!_didIteratorError) {
                  _context2.next = 25;
                  break;
                }

                throw _iteratorError;

              case 25:
                return _context2.finish(22);

              case 26:
                return _context2.finish(19);

              case 27:
                if (!(accountNames.length === 0)) {
                  _context2.next = 30;
                  break;
                }

                _context2.next = 30;
                return this.addAccount('default', { type: _constants.AccountType.PROVIDER });

              case 30:
                this._engine.start();

              case 31:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[4, 15, 19, 27], [20,, 22, 26]]);
      }));

      function connect() {
        return _ref2.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: 'getProvider',
    value: function getProvider() {
      return this._engine;
    }
  }, {
    key: 'addAccountType',
    value: function addAccountType(type, factory) {
      (0, _invariant2.default)(!this._accountFactories[type], 'Account type "' + type + '" is already defined');
      this._accountFactories[type] = factory;
    }
  }, {
    key: 'addAccount',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(name, _ref4) {
        var type = _ref4.type,
            otherSettings = (0, _objectWithoutProperties3.default)(_ref4, ['type']);
        var factory, accountData, account;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _invariant2.default)(this._engine, 'engine must be set up before adding an account');

                if (!this._accounts[name]) {
                  _context3.next = 3;
                  break;
                }

                throw new Error('An account with this name already exists.');

              case 3:
                factory = this._accountFactories[type];

                (0, _invariant2.default)(factory, 'no factory for type "' + type + '"');
                _context3.next = 7;
                return factory(otherSettings, this._provider);

              case 7:
                accountData = _context3.sent;
                account = (0, _extends3.default)({ name: name, type: type }, accountData);

                this._accounts[name] = account;
                if (!this._currentAccount || name === 'default') {
                  this.useAccount(name);
                }
                return _context3.abrupt('return', account);

              case 12:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function addAccount(_x3, _x4) {
        return _ref3.apply(this, arguments);
      }

      return addAccount;
    }()
  }, {
    key: 'listAccounts',
    value: function listAccounts() {
      return (0, _fp.map)((0, _fp.pick)(['name', 'type', 'address']), this._accounts);
    }
  }, {
    key: 'useAccount',
    value: function useAccount(name) {
      (0, _invariant2.default)(this._accounts[name], 'No account found with name "' + name + '".');

      if (this._currentAccount) {
        this._engine.stop();
        this._engine.removeProvider(this.currentWallet());
      }

      this._currentAccount = name;
      // add the provider at index 0 so that it takes precedence over RpcSource
      this._engine.addProvider(this.currentWallet(), 0);
      this._engine.start();
    }
  }, {
    key: 'hasAccount',
    value: function hasAccount() {
      return !!this._currentAccount;
    }
  }, {
    key: 'hasNonProviderAccount',
    value: function hasNonProviderAccount() {
      return this.hasAccount() && this.currentAccount().type != _constants.AccountType.PROVIDER;
    }

    // we intentionally omit subprovider (implementation detail) and privateKey
    // (sensitive info).

  }, {
    key: 'currentAccount',
    value: function currentAccount() {
      (0, _invariant2.default)(this.hasAccount(), 'No account is set up.');
      return (0, _fp.pick)(['name', 'type', 'address'], this._accounts[this._currentAccount]);
    }
  }, {
    key: 'currentAddress',
    value: function currentAddress() {
      (0, _invariant2.default)(this.hasAccount(), 'No account is set up.');
      return this._accounts[this._currentAccount].address;
    }
  }, {
    key: 'currentWallet',
    value: function currentWallet() {
      return this._accounts[this._currentAccount].subprovider;
    }
  }]);
  return AccountsService;
}(_PublicService3.default);

exports.default = AccountsService;