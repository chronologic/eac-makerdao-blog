'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PublicService2 = require('../core/PublicService');

var _PublicService3 = _interopRequireDefault(_PublicService2);

var _TransactionObject = require('./TransactionObject');

var _TransactionObject2 = _interopRequireDefault(_TransactionObject);

var _ObjectWrapper = require('../utils/ObjectWrapper');

var _ObjectWrapper2 = _interopRequireDefault(_ObjectWrapper);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var txId = 1;

var TransactionManager = function (_PublicService) {
  (0, _inherits3.default)(TransactionManager, _PublicService);

  function TransactionManager() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transactionManager';
    (0, _classCallCheck3.default)(this, TransactionManager);

    var _this = (0, _possibleConstructorReturn3.default)(this, (TransactionManager.__proto__ || (0, _getPrototypeOf2.default)(TransactionManager)).call(this, name, ['web3', 'log', 'nonce']));

    _this._transactions = [];
    _this._listeners = [];
    return _this;
  }

  (0, _createClass3.default)(TransactionManager, [{
    key: 'formatHybridTx',
    value: function formatHybridTx(contract, key, args, name) {
      var businessObject = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

      var contractCall = this.injectSettings(args).then(function (newArgs) {
        return contract[key].apply(contract, (0, _toConsumableArray3.default)(newArgs));
      });
      return this.createHybridTx(contractCall, {
        businessObject: businessObject,
        metadata: { contract: name, method: key, args: args }
      });
    }
  }, {
    key: 'injectSettings',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(args) {
        var settings;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getSettings();

              case 2:
                settings = _context.sent;

                if (!((0, _typeof3.default)(args[args.length - 1]) === 'object' && !(0, _keys2.default)(args[args.length - 1]).includes('_bn'))) {
                  _context.next = 8;
                  break;
                }

                _context.next = 6;
                return (0, _lodash2.default)(args[args.length - 1], settings);

              case 6:
                _context.next = 9;
                break;

              case 8:
                args.push(settings);

              case 9:
                return _context.abrupt('return', args);

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function injectSettings(_x3) {
        return _ref.apply(this, arguments);
      }

      return injectSettings;
    }()
  }, {
    key: 'getSettings',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var nonce, options, settings;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.get('nonce').getNonce();

              case 2:
                nonce = _context2.sent;
                options = this.get('web3').transactionSettings();
                settings = { nonce: nonce };


                if (options) {
                  (0, _keys2.default)(options).map(function (option) {
                    settings[option] = options[option];
                  });
                }

                return _context2.abrupt('return', settings);

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSettings() {
        return _ref2.apply(this, arguments);
      }

      return getSettings;
    }()

    // FIXME: having a method that returns one thing when it's called in a promise
    // chain and something else when it's not (besides a promise that resolves to
    // the first thing) makes it pretty difficult to work with.

  }, {
    key: 'createHybridTx',
    value: function createHybridTx(tx) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          businessObject = _ref3.businessObject,
          parseLogs = _ref3.parseLogs,
          metadata = _ref3.metadata;

      if (tx._original) {
        console.warn('Redundant call to createHybridTx');
        return tx;
      }

      var txo = new _TransactionObject2.default(tx, this.get('web3'), this.get('nonce'), businessObject, parseLogs);

      var hybrid = txo.mine().then(function () {
        return txo.onMined();
      });
      (0, _assign2.default)(hybrid, {
        _original: txo,
        getOriginalTransaction: function getOriginalTransaction() {
          return txo;
        },
        _txId: txId++,
        metadata: metadata // put whatever you want in here for inspecting/debugging
      });

      if (businessObject) {
        _ObjectWrapper2.default.addWrapperInterface(hybrid, businessObject);
      }

      _ObjectWrapper2.default.addWrapperInterface(hybrid, txo, ['logs', 'hash', 'fees', 'timeStamp', 'timeStampSubmitted']);

      this._transactions.push(hybrid);
      this._listeners.forEach(function (cb) {
        return cb(hybrid);
      });

      return hybrid;
    }
  }, {
    key: 'getTransactions',
    value: function getTransactions() {
      return this._transactions;
    }
  }, {
    key: 'onNewTransaction',
    value: function onNewTransaction(callback) {
      this._listeners.push(callback);
    }
  }]);
  return TransactionManager;
}(_PublicService3.default);

exports.default = TransactionManager;