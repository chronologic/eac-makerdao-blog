'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PrivateService2 = require('../core/PrivateService');

var _PrivateService3 = _interopRequireDefault(_PrivateService2);

var _utils = require('../utils');

var _Web3ServiceList = require('../utils/Web3ServiceList');

var _Web3ServiceList2 = _interopRequireDefault(_Web3ServiceList);

var _promiseProps = require('promise-props');

var _promiseProps2 = _interopRequireDefault(_promiseProps);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TIMER_CONNECTION = 'web3CheckConnectionStatus';
var TIMER_AUTHENTICATION = 'web3CheckAuthenticationStatus';
var TIMER_DEFAULT_DELAY = 5000;

var Web3Service = function (_PrivateService) {
  (0, _inherits3.default)(Web3Service, _PrivateService);

  function Web3Service() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'web3';
    (0, _classCallCheck3.default)(this, Web3Service);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Web3Service.__proto__ || (0, _getPrototypeOf2.default)(Web3Service)).call(this, name, ['accounts', 'log', 'timer', 'cache', 'event']));

    _this._web3 = null;
    _this._ethersProvider = null;
    _this._blockListeners = {};
    _this._currentBlock = null;
    _this._info = { version: {} };
    _this._statusTimerDelay = TIMER_DEFAULT_DELAY;
    _this._defaultEmitter = null;
    _this._transactionSettings = null;

    _Web3ServiceList2.default.push(_this);
    return _this;
  }

  (0, _createClass3.default)(Web3Service, [{
    key: 'version',
    value: function version() {
      return this._info.version;
    }
  }, {
    key: 'networkId',
    value: function networkId() {
      var result = this.version().network;
      if (!result) {
        throw new Error('Cannot resolve network ID. Are you connected?');
      }
      return parseInt(result);
    }
  }, {
    key: 'currentAccount',
    value: function currentAccount() {
      return this.get('accounts').currentAddress();
    }
  }, {
    key: 'ethersProvider',
    value: function ethersProvider() {
      return this._ethersProvider;
    }
  }, {
    key: 'web3Provider',
    value: function web3Provider() {
      return this._web3.currentProvider;
    }
  }, {
    key: 'transactionSettings',
    value: function transactionSettings() {
      return this._transactionSettings;
    }
  }, {
    key: 'web3Contract',
    value: function web3Contract(abi, address) {
      return this._web3.eth.contract(abi).at(address);
    }
  }, {
    key: 'initialize',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(settings) {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.get('log').info('Web3 is initializing...');
                this._defaultEmitter = this.get('event');

                this._web3 = new _web2.default();
                this._web3.setProvider(this.get('accounts').getProvider());

                // TODO: is this still necessary? it seems confusing to have methods
                // that look like web3.eth methods but behave differently
                this.eth = {};
                (0, _assign2.default)(this.eth, (0, _utils.promisifyMethods)(this._web3.eth, ['getAccounts', 'estimateGas', 'getBlock', 'sendTransaction', 'getBalance']));

                this._setStatusTimerDelay(settings.statusTimerDelay);
                this._installCleanUpHooks();
                this._defaultEmitter.emit('web3/INITIALIZED', {
                  provider: (0, _extends3.default)({}, settings.provider)
                });
                this._transactionSettings = settings.transactionSettings;

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initialize(_x2) {
        return _ref.apply(this, arguments);
      }

      return initialize;
    }()
  }, {
    key: 'connect',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.get('log').info('Web3 is connecting...');

                _context2.next = 3;
                return (0, _promiseProps2.default)({
                  api: this._web3.version.api,
                  node: (0, _utils.promisify)(this._web3.version.getNode)(),
                  network: (0, _utils.promisify)(this._web3.version.getNetwork)(),
                  ethereum: (0, _utils.promisify)(this._web3.version.getEthereum)()
                });

              case 3:
                this._info.version = _context2.sent;

                if (this._info.version.node.includes('MetaMask')) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 7;
                return (0, _utils.promisify)(this._web3.version.getWhisper)().catch(function () {
                  return '';
                });

              case 7:
                this._info.version.whisper = _context2.sent;

              case 8:
                this._setUpEthers(this.networkId());
                this._installDisconnectCheck();
                _context2.next = 12;
                return this._initEventPolling();

              case 12:
                this._defaultEmitter.emit('web3/CONNECTED', (0, _extends3.default)({}, this._info.version));
                this.get('log').info('Web3 version: ', this._info.version);

              case 14:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function connect() {
        return _ref2.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: 'authenticate',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.get('log').info('Web3 is authenticating...');

                this._defaultEmitter.emit('web3/AUTHENTICATED', {
                  account: this.currentAccount()
                });
                this._installDeauthenticationCheck();

              case 3:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function authenticate() {
        return _ref3.apply(this, arguments);
      }

      return authenticate;
    }()
  }, {
    key: 'getNetwork',
    value: function getNetwork() {
      return this._info.version.network;
    }
  }, {
    key: 'blockNumber',
    value: function blockNumber() {
      return this._currentBlock;
    }
  }, {
    key: 'onNewBlock',
    value: function onNewBlock(callback) {
      if (!this._blockListeners['*']) {
        this._blockListeners['*'] = [];
      }

      this._blockListeners['*'].push(callback);
    }
  }, {
    key: 'waitForBlockNumber',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(blockNumber) {
        var _this2 = this;

        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(blockNumber < this._currentBlock)) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('Cannot wait for past block ' + blockNumber);

              case 2:
                if (!(blockNumber === this._currentBlock)) {
                  _context4.next = 4;
                  break;
                }

                return _context4.abrupt('return', _promise2.default.resolve(blockNumber));

              case 4:

                if (!this._blockListeners[blockNumber]) {
                  this._blockListeners[blockNumber] = [];
                }

                return _context4.abrupt('return', new _promise2.default(function (resolve) {
                  _this2._blockListeners[blockNumber].push(resolve);
                }));

              case 6:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function waitForBlockNumber(_x3) {
        return _ref4.apply(this, arguments);
      }

      return waitForBlockNumber;
    }()
  }, {
    key: '_updateBlockNumber',
    value: function _updateBlockNumber(blockNumber) {
      this.get('log').info('New block: ', blockNumber);
      this._currentBlock = blockNumber;

      if (this._blockListeners[blockNumber]) {
        this._blockListeners[blockNumber].forEach(function (c) {
          return c(blockNumber);
        });
        this._blockListeners[blockNumber] = undefined;
      }

      if (this._blockListeners['*']) {
        this._blockListeners['*'].forEach(function (c) {
          return c(blockNumber);
        });
      }
    }
  }, {
    key: '_initEventPolling',
    value: function _initEventPolling() {
      this.onNewBlock(this.get('event').ping);
    }
  }, {
    key: '_installCleanUpHooks',
    value: function _installCleanUpHooks() {
      var _this3 = this;

      this.manager().onDisconnected(function () {
        _this3.get('timer').disposeTimer(TIMER_CONNECTION);
      });

      this.manager().onDeauthenticated(function () {
        _this3.get('timer').disposeTimer(TIMER_AUTHENTICATION);
      });
    }
  }, {
    key: '_setUpEthers',
    value: function _setUpEthers(chainId) {
      var ethers = require('ethers');
      this._ethersProvider = this._buildEthersProvider(ethers, chainId);
    }
  }, {
    key: '_buildEthersProvider',
    value: function _buildEthersProvider(ethers, chainId) {
      var _this4 = this;

      var provider = new ethers.providers.Web3Provider(this._web3.currentProvider, { name: (0, _utils.getNetworkName)(chainId), chainId: chainId });

      provider.on('block', function (num) {
        return _this4._updateBlockNumber(num);
      });
      this.manager().onDisconnected(function () {
        return provider.removeAllListeners('block');
      });

      return provider;
    }
  }, {
    key: '_setStatusTimerDelay',
    value: function _setStatusTimerDelay(delay) {
      this._statusTimerDelay = delay ? parseInt(delay) : TIMER_DEFAULT_DELAY;
    }
  }, {
    key: '_installDisconnectCheck',
    value: function _installDisconnectCheck() {
      var _this5 = this;

      this.get('timer').createTimer(TIMER_CONNECTION, this._statusTimerDelay, true, function () {
        return _this5._isStillConnected().then(function (connected) {
          if (!connected) {
            _this5._defaultEmitter.emit('web3/DISCONNECTED');
            _this5.disconnect();
          }
        });
      });
    }
  }, {
    key: '_isStillConnected',
    value: function _isStillConnected() {
      var _this6 = this;

      return (0, _utils.promisify)(this._web3.version.getNetwork)().then(function (network) {
        return network === _this6._info.version['network'];
      }).catch(function () {
        return false;
      });
    }
  }, {
    key: '_installDeauthenticationCheck',
    value: function _installDeauthenticationCheck() {
      var _this7 = this;

      this.get('timer').createTimer(TIMER_AUTHENTICATION, this._statusTimerDelay, //what should this number be?
      true, function () {
        return _this7._isStillAuthenticated().then(function (authenticated) {
          if (!authenticated) {
            _this7._defaultEmitter.emit('web3/DEAUTHENTICATED');
            _this7.deauthenticate();
          }
        });
      });
    }
  }, {
    key: '_isStillAuthenticated',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var account;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!this.get('accounts').hasNonProviderAccount()) {
                  _context5.next = 2;
                  break;
                }

                return _context5.abrupt('return', this._isStillConnected());

              case 2:
                _context5.next = 4;
                return (0, _utils.promisify)(this._web3.eth.getAccounts)();

              case 4:
                account = _context5.sent[0];
                return _context5.abrupt('return', account === this.currentAccount());

              case 6:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _isStillAuthenticated() {
        return _ref5.apply(this, arguments);
      }

      return _isStillAuthenticated;
    }()
  }]);
  return Web3Service;
}(_PrivateService3.default);

exports.default = Web3Service;