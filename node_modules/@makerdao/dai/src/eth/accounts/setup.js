'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBrowserProvider = exports.setupEngine = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var setupEngine = exports.setupEngine = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(settings) {
    var providerSettings, engine, result, rpcUrl;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            providerSettings = settings.web3.provider;
            engine = new _es2.default();
            result = { engine: engine };

            if (!(providerSettings.type === _ProviderType2.default.BROWSER || !providerSettings)) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return getBrowserProvider();

          case 6:
            result.provider = _context.sent;
            _context.next = 11;
            break;

          case 9:
            rpcUrl = getRpcUrl(providerSettings);

            result.provider = new _rpc2.default({ rpcUrl: rpcUrl });

          case 11:

            engine.addProvider(result.provider);
            return _context.abrupt('return', result);

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function setupEngine(_x) {
    return _ref.apply(this, arguments);
  };
}();

var getBrowserProvider = exports.getBrowserProvider = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var wrap;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof window === 'undefined')) {
              _context2.next = 2;
              break;
            }

            throw new Error('Cannot use ProviderType.BROWSER because window is undefined');

          case 2:
            wrap = function wrap(provider) {
              var subprovider = new _provider2.default(provider);
              subprovider.isWindowProvider = true;
              return subprovider;
            };

            // If web3 is injected (old MetaMask)...


            if (!(typeof window.web3 !== 'undefined')) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt('return', wrap(window.web3.currentProvider));

          case 5:
            return _context2.abrupt('return', new _promise2.default(function (resolve, reject) {
              var resolved = false;

              window.addEventListener('message', function (_ref3) {
                var data = _ref3.data;

                if (data && data.type && data.type === 'ETHEREUM_PROVIDER_SUCCESS') {
                  resolved = true;
                  resolve(wrap(window.ethereum));
                }
              });

              // Request provider
              window.postMessage({ type: 'ETHEREUM_PROVIDER_REQUEST' }, '*');

              setTimeout(function () {
                if (!resolved) reject(new Error('Timed out waiting for provider'));
              }, 30000);
            }));

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getBrowserProvider() {
    return _ref2.apply(this, arguments);
  };
}();

var _ProviderType = require('../web3/ProviderType');

var _ProviderType2 = _interopRequireDefault(_ProviderType);

var _es = require('web3-provider-engine/dist/es5');

var _es2 = _interopRequireDefault(_es);

var _rpc = require('web3-provider-engine/dist/es5/subproviders/rpc');

var _rpc2 = _interopRequireDefault(_rpc);

var _provider = require('web3-provider-engine/dist/es5/subproviders/provider');

var _provider2 = _interopRequireDefault(_provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getRpcUrl(providerSettings) {
  var network = providerSettings.network,
      infuraApiKey = providerSettings.infuraApiKey,
      type = providerSettings.type,
      url = providerSettings.url;

  switch (type) {
    case _ProviderType2.default.HTTP:
      return url;
    case _ProviderType2.default.INFURA:
      return 'https://' + network + '.infura.io/' + (infuraApiKey || '');
    case _ProviderType2.default.TEST:
      return 'http://127.1:2000';
    default:
      throw new Error('Invalid web3 provider type: ' + type);
  }
}