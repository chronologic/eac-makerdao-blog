'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.browserProviderAccountFactory = exports.providerAccountFactory = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var getAccountAddress = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(subprovider) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', new _promise2.default(function (resolve, reject) {
              return subprovider.handleRequest({ method: 'eth_accounts', params: [], id: 1 }, null, function (err, val) {
                return err ? reject(err) : resolve(val[0]);
              });
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getAccountAddress(_x) {
    return _ref4.apply(this, arguments);
  };
}();

var providerAccountFactory = exports.providerAccountFactory = function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_, provider) {
    var subprovider;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // we need to be able to swap out this account while leaving the original
            // provider in place for other accounts, so the subprovider here has to be
            // a different instance. using Proxy is a simple way to accomplish this.
            subprovider = new Proxy(provider, {});
            _context2.t0 = subprovider;
            _context2.next = 4;
            return getAccountAddress(subprovider);

          case 4:
            _context2.t1 = _context2.sent;
            return _context2.abrupt('return', {
              subprovider: _context2.t0,
              address: _context2.t1
            });

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function providerAccountFactory(_x2, _x3) {
    return _ref5.apply(this, arguments);
  };
}();

var browserProviderAccountFactory = exports.browserProviderAccountFactory = function () {
  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var subprovider;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _setup.getBrowserProvider)();

          case 2:
            subprovider = _context3.sent;
            _context3.t0 = subprovider;
            _context3.next = 6;
            return getAccountAddress(subprovider);

          case 6:
            _context3.t1 = _context3.sent;
            return _context3.abrupt('return', {
              subprovider: _context3.t0,
              address: _context3.t1
            });

          case 8:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function browserProviderAccountFactory() {
    return _ref6.apply(this, arguments);
  };
}();

exports.privateKeyAccountFactory = privateKeyAccountFactory;

var _ethereumjsUtil = require('ethereumjs-util');

var _ethereumjsUtil2 = _interopRequireDefault(_ethereumjsUtil);

var _wallet = require('web3-provider-engine/dist/es5/subproviders/wallet');

var _wallet2 = _interopRequireDefault(_wallet);

var _setup = require('./setup');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function privateKeyAccountFactory(_ref) {
  var key = _ref.key;

  if (typeof key != 'string' || !key.match(/^(0x)?[0-9a-fA-F]{64}$/)) {
    throw new Error('Invalid private key format');
  }

  var _ref2 = key.startsWith('0x') ? [key, key.replace(/^0x/, '')] : ['0x' + key, key],
      _ref3 = (0, _slicedToArray3.default)(_ref2, 2),
      keyWithPrefix = _ref3[0],
      keySansPrefix = _ref3[1];

  var address = '0x' + _ethereumjsUtil2.default.privateToAddress(keyWithPrefix).toString('hex');
  var keyBuffer = Buffer.from(keySansPrefix, 'hex');

  var subprovider = new _wallet2.default({ getAddressString: function getAddressString() {
      return address;
    }, getPrivateKey: function getPrivateKey() {
      return keyBuffer;
    } }, {});

  return { subprovider: subprovider, address: address };
}