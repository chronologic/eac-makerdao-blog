'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PrivateService2 = require('../core/PrivateService');

var _PrivateService3 = _interopRequireDefault(_PrivateService2);

var _contracts = require('../../contracts/contracts');

var _contracts2 = _interopRequireDefault(_contracts);

var _Cdp = require('./Cdp');

var _Cdp2 = _interopRequireDefault(_Cdp);

var _bignumber = require('bignumber.js');

var _bignumber2 = _interopRequireDefault(_bignumber);

var _constants = require('../utils/constants');

var _Currency = require('./Currency');

var _conversion = require('../utils/conversion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EthereumCdpService = function (_PrivateService) {
  (0, _inherits3.default)(EthereumCdpService, _PrivateService);

  /**
   * @param {string} name
   */
  function EthereumCdpService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cdp';
    (0, _classCallCheck3.default)(this, EthereumCdpService);
    return (0, _possibleConstructorReturn3.default)(this, (EthereumCdpService.__proto__ || (0, _getPrototypeOf2.default)(EthereumCdpService)).call(this, name, ['smartContract', 'token', 'conversion', 'allowance', 'price', 'event']));
  }

  (0, _createClass3.default)(EthereumCdpService, [{
    key: '_smartContract',
    value: function _smartContract() {
      return this.get('smartContract');
    }
  }, {
    key: '_tubContract',
    value: function _tubContract() {
      return this._smartContract().getContractByName(_contracts2.default.SAI_TUB);
    }
  }, {
    key: '_web3Service',
    value: function _web3Service() {
      return this._smartContract().get('web3');
    }
  }, {
    key: '_conversionService',
    value: function _conversionService() {
      return this.get('conversion');
    }
  }, {
    key: 'openCdp',
    value: function openCdp() {
      return new _Cdp2.default(this).transactionObject();
    }
  }, {
    key: 'getCdp',
    value: function getCdp(id) {
      return _Cdp2.default.find(id, this);
    }
  }, {
    key: 'shut',
    value: function shut(cdpId) {
      var _this2 = this;

      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return _promise2.default.all([this.get('allowance').requireAllowance(_Currency.MKR, this._tubContract().address), this.get('allowance').requireAllowance(_Currency.DAI, this._tubContract().address)]).then(function () {
        return _this2._tubContract().shut(hexCdpId);
      });
    }
  }, {
    key: 'lockEth',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(cdpId, amount) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.ETH;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._conversionService().convertEthToWeth(amount, unit);

              case 2:
                return _context.abrupt('return', this.lockWeth(cdpId, amount));

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function lockEth(_x2, _x3) {
        return _ref.apply(this, arguments);
      }

      return lockEth;
    }()
  }, {
    key: 'lockWeth',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(cdpId, amount) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.WETH;
        var wethPerPeth, weth;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.get('price').getWethToPethRatio();

              case 2:
                wethPerPeth = _context2.sent;
                weth = (0, _Currency.getCurrency)(amount, unit);
                _context2.next = 6;
                return this._conversionService().convertWethToPeth(weth);

              case 6:
                return _context2.abrupt('return', this.lockPeth(cdpId, weth.div(wethPerPeth)));

              case 7:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function lockWeth(_x5, _x6) {
        return _ref2.apply(this, arguments);
      }

      return lockWeth;
    }()
  }, {
    key: 'lockPeth',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(cdpId, amount) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.PETH;
        var hexCdpId, value;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                value = (0, _Currency.getCurrency)(amount, unit).toEthersBigNumber('wei');
                _context3.next = 4;
                return this.get('allowance').requireAllowance(_Currency.PETH, this._tubContract().address);

              case 4:
                return _context3.abrupt('return', this._tubContract().lock(hexCdpId, value));

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function lockPeth(_x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return lockPeth;
    }()
  }, {
    key: 'freePeth',
    value: function freePeth(cdpId, amount) {
      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.PETH;

      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, unit).toEthersBigNumber('wei');
      return this._tubContract().free(hexCdpId, value);
    }
  }, {
    key: 'drawDai',
    value: function drawDai(cdpId, amount) {
      var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.DAI;

      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      var value = (0, _Currency.getCurrency)(amount, unit).toEthersBigNumber('wei');
      return this._tubContract().draw(hexCdpId, value);
    }
  }, {
    key: 'wipeDai',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(cdpId, amount) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.DAI;
        var hexCdpId, value;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                value = (0, _Currency.getCurrency)(amount, unit).toEthersBigNumber('wei');
                _context4.next = 4;
                return _promise2.default.all([this.get('allowance').requireAllowance(_Currency.MKR, this._tubContract().address), this.get('allowance').requireAllowance(_Currency.DAI, this._tubContract().address)]);

              case 4:
                return _context4.abrupt('return', this._tubContract().wipe(hexCdpId, value));

              case 5:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function wipeDai(_x13, _x14) {
        return _ref4.apply(this, arguments);
      }

      return wipeDai;
    }()
  }, {
    key: 'getInfo',
    value: function getInfo(cdpId) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._tubContract().cups(hexCdpId);
    }
  }, {
    key: 'getCollateralValue',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(cdpId) {
        var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Currency.ETH;
        var hexCdpId, pethValue, pethPrice, ethValue, ethPrice, usdValue;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                _context5.t0 = _Currency.PETH;
                _context5.next = 4;
                return this._tubContract().ink(hexCdpId);

              case 4:
                _context5.t1 = _context5.sent;
                pethValue = _context5.t0.wei.call(_context5.t0, _context5.t1);

                if (!(unit === _Currency.PETH)) {
                  _context5.next = 8;
                  break;
                }

                return _context5.abrupt('return', pethValue);

              case 8:
                _context5.next = 10;
                return this.get('price').getWethToPethRatio();

              case 10:
                pethPrice = _context5.sent;
                ethValue = (0, _Currency.ETH)(pethValue.times(pethPrice));

                if (!(unit === _Currency.ETH)) {
                  _context5.next = 14;
                  break;
                }

                return _context5.abrupt('return', ethValue);

              case 14:
                _context5.next = 16;
                return this.get('price').getEthPrice();

              case 16:
                ethPrice = _context5.sent;
                usdValue = ethValue.times(ethPrice);

                if (!(unit === _Currency.USD)) {
                  _context5.next = 20;
                  break;
                }

                return _context5.abrupt('return', usdValue);

              case 20:
                throw new Error('Don\'t know how to get collateral value in ' + (unit ? unit.symbol : unit));

              case 21:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getCollateralValue(_x16) {
        return _ref5.apply(this, arguments);
      }

      return getCollateralValue;
    }()
  }, {
    key: 'getDebtValue',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(cdpId) {
        var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Currency.DAI;
        var hexCdpId, tub, tab, daiDebt, targetPrice;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                // we need to use the Web3.js contract interface to get the return value
                // from the non-constant function `tab`

                tub = this._smartContract().getWeb3ContractByName(_contracts2.default.SAI_TUB);
                _context6.next = 4;
                return new _promise2.default(function (resolve, reject) {
                  return tub.tab.call(hexCdpId, function (err, val) {
                    return err ? reject(err) : resolve(val);
                  });
                });

              case 4:
                tab = _context6.sent;
                daiDebt = _Currency.DAI.wei(tab.toString());
                _context6.t0 = unit;
                _context6.next = _context6.t0 === _Currency.DAI ? 9 : _context6.t0 === _Currency.USD ? 10 : 14;
                break;

              case 9:
                return _context6.abrupt('return', daiDebt);

              case 10:
                _context6.next = 12;
                return this.getTargetPrice();

              case 12:
                targetPrice = _context6.sent;
                return _context6.abrupt('return', daiDebt.times(targetPrice));

              case 14:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getDebtValue(_x18) {
        return _ref6.apply(this, arguments);
      }

      return getDebtValue;
    }()

    //updates compound interest calculations for all CDPs.  Used by tests that depend on a fee

  }, {
    key: '_drip',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt('return', this._tubContract().drip());

              case 1:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _drip() {
        return _ref7.apply(this, arguments);
      }

      return _drip;
    }()
  }, {
    key: 'getGovernanceFee',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(cdpId) {
        var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Currency.MKR;
        var hexCdpId, tub, rap, mkrFee, price;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
                // we need to use the Web3.js contract interface to get the return value
                // from the non-constant function `rap`

                tub = this._smartContract().getWeb3ContractByName(_contracts2.default.SAI_TUB);
                _context8.next = 4;
                return new _promise2.default(function (resolve, reject) {
                  return tub.rap.call(hexCdpId, function (err, val) {
                    return err ? reject(err) : resolve(val);
                  });
                });

              case 4:
                rap = _context8.sent;
                mkrFee = _Currency.MKR.wei(rap);
                _context8.t0 = unit;
                _context8.next = _context8.t0 === _Currency.MKR ? 9 : _context8.t0 === _Currency.USD ? 10 : 14;
                break;

              case 9:
                return _context8.abrupt('return', mkrFee);

              case 10:
                _context8.next = 12;
                return this.get('price').getMkrPrice();

              case 12:
                price = _context8.sent;
                return _context8.abrupt('return', mkrFee.times(price));

              case 14:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getGovernanceFee(_x20) {
        return _ref8.apply(this, arguments);
      }

      return getGovernanceFee;
    }()
  }, {
    key: 'getCollateralizationRatio',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(cdpId) {
        var usdDebt, _ref10, _ref11, pethPrice, pethCollateral;

        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getDebtValue(cdpId, _Currency.USD);

              case 2:
                usdDebt = _context9.sent;

                if (!usdDebt.eq(0)) {
                  _context9.next = 5;
                  break;
                }

                return _context9.abrupt('return', Infinity);

              case 5:
                _context9.next = 7;
                return _promise2.default.all([this.get('price').getPethPrice(), this.getCollateralValue(cdpId, _Currency.PETH)]);

              case 7:
                _ref10 = _context9.sent;
                _ref11 = (0, _slicedToArray3.default)(_ref10, 2);
                pethPrice = _ref11[0];
                pethCollateral = _ref11[1];
                return _context9.abrupt('return', pethCollateral.times(pethPrice).div(usdDebt).toNumber());

              case 12:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getCollateralizationRatio(_x22) {
        return _ref9.apply(this, arguments);
      }

      return getCollateralizationRatio;
    }()
  }, {
    key: 'getLiquidationRatio',
    value: function () {
      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {
        var value;
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this._tubContract().mat();

              case 2:
                value = _context10.sent;
                return _context10.abrupt('return', new _bignumber2.default(value.toString()).dividedBy(_constants.RAY).toNumber());

              case 4:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getLiquidationRatio() {
        return _ref12.apply(this, arguments);
      }

      return getLiquidationRatio;
    }()
  }, {
    key: 'getLiquidationPenalty',
    value: function () {
      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {
        var value;
        return _regenerator2.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this._tubContract().axe();

              case 2:
                value = _context11.sent;
                return _context11.abrupt('return', new _bignumber2.default(value.toString()).dividedBy(_constants.RAY).minus(1).toNumber());

              case 4:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getLiquidationPenalty() {
        return _ref13.apply(this, arguments);
      }

      return getLiquidationPenalty;
    }()
  }, {
    key: 'getTargetPrice',
    value: function () {
      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12() {
        var vox, par;
        return _regenerator2.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                // we need to use the Web3.js contract interface to get the return value
                // from the non-constant function `par()`
                vox = this._smartContract().getWeb3ContractByName(_contracts2.default.SAI_VOX);
                _context12.next = 3;
                return new _promise2.default(function (resolve, reject) {
                  return vox.par.call(function (err, val) {
                    return err ? reject(err) : resolve(val);
                  });
                });

              case 3:
                par = _context12.sent;
                return _context12.abrupt('return', _Currency.USD_DAI.ray(par));

              case 5:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getTargetPrice() {
        return _ref14.apply(this, arguments);
      }

      return getTargetPrice;
    }()
  }, {
    key: 'getLiquidationPrice',
    value: function () {
      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(cdpId) {
        var _ref16, _ref17, debt, liqRatio, collateral;

        return _regenerator2.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return _promise2.default.all([this.getDebtValue(cdpId, _Currency.USD), this.getLiquidationRatio(), this.getCollateralValue(cdpId)]);

              case 2:
                _ref16 = _context13.sent;
                _ref17 = (0, _slicedToArray3.default)(_ref16, 3);
                debt = _ref17[0];
                liqRatio = _ref17[1];
                collateral = _ref17[2];
                return _context13.abrupt('return', debt.times(liqRatio).div(collateral));

              case 8:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getLiquidationPrice(_x23) {
        return _ref15.apply(this, arguments);
      }

      return getLiquidationPrice;
    }()
  }, {
    key: 'isSafe',
    value: function () {
      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14(cdpId) {
        var _ref19, _ref20, liqPrice, ethPrice;

        return _regenerator2.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return _promise2.default.all([this.getLiquidationPrice(cdpId), this.get('price').getEthPrice()]);

              case 2:
                _ref19 = _context14.sent;
                _ref20 = (0, _slicedToArray3.default)(_ref19, 2);
                liqPrice = _ref20[0];
                ethPrice = _ref20[1];
                return _context14.abrupt('return', (0, _Currency.USD_ETH)(ethPrice).gte(liqPrice));

              case 7:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function isSafe(_x24) {
        return _ref18.apply(this, arguments);
      }

      return isSafe;
    }()
  }, {
    key: 'getAnnualGovernanceFee',
    value: function getAnnualGovernanceFee() {
      return this._tubContract().fee().then(function (bn) {
        var fee = new _bignumber2.default(bn.toString()).dividedBy(_constants.RAY);
        var secondsPerYear = 60 * 60 * 24 * 365;
        _bignumber2.default.config({ POW_PRECISION: 100 });
        return fee.pow(secondsPerYear).minus(1).toNumber();
      });
    }
  }, {
    key: 'getSystemCollateralization',
    value: function () {
      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {
        var dai, _ref22, _ref23, _totalWethLocked, wethPrice, daiSupply, targetPrice, totalCollateralValue, systemDaiDebt;

        return _regenerator2.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                dai = this.get('token').getToken(_Currency.DAI);
                _context15.next = 3;
                return _promise2.default.all([this._tubContract().pie(), this.get('price').getEthPrice(), dai.totalSupply(), this.getTargetPrice()]);

              case 3:
                _ref22 = _context15.sent;
                _ref23 = (0, _slicedToArray3.default)(_ref22, 4);
                _totalWethLocked = _ref23[0];
                wethPrice = _ref23[1];
                daiSupply = _ref23[2];
                targetPrice = _ref23[3];
                totalCollateralValue = new _bignumber2.default(_totalWethLocked).div(_constants.WAD).times(wethPrice.toBigNumber());
                systemDaiDebt = daiSupply.times(targetPrice);
                return _context15.abrupt('return', totalCollateralValue.div(systemDaiDebt.toBigNumber()).toNumber());

              case 12:
              case 'end':
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function getSystemCollateralization() {
        return _ref21.apply(this, arguments);
      }

      return getSystemCollateralization;
    }()
  }, {
    key: 'getWethToPethRatio',
    value: function () {
      var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {
        var value;
        return _regenerator2.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this._tubContract().per();

              case 2:
                value = _context16.sent;
                return _context16.abrupt('return', new _bignumber2.default(value.toString()).dividedBy(_constants.RAY).toNumber());

              case 4:
              case 'end':
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getWethToPethRatio() {
        return _ref24.apply(this, arguments);
      }

      return getWethToPethRatio;
    }()
  }, {
    key: 'give',
    value: function give(cdpId, newAddress) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._tubContract().give(hexCdpId, newAddress);
    }
  }, {
    key: 'bite',
    value: function bite(cdpId) {
      var hexCdpId = (0, _conversion.numberToBytes32)(cdpId);
      return this._tubContract().bite(hexCdpId, { gasLimit: 4000000 });
    }
  }]);
  return EthereumCdpService;
}(_PrivateService3.default);

exports.default = EthereumCdpService;