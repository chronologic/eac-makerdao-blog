'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PublicService2 = require('../core/PublicService');

var _PublicService3 = _interopRequireDefault(_PublicService2);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NonceService = function (_PublicService) {
  (0, _inherits3.default)(NonceService, _PublicService);

  function NonceService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nonce';
    (0, _classCallCheck3.default)(this, NonceService);

    var _this = (0, _possibleConstructorReturn3.default)(this, (NonceService.__proto__ || (0, _getPrototypeOf2.default)(NonceService)).call(this, name, ['web3', 'accounts']));

    _this._counts = {};
    return _this;
  }

  (0, _createClass3.default)(NonceService, [{
    key: 'connect',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._accountsService = this.get('accounts');
                this._web3Service = this.get('web3');
                _context.next = 4;
                return this.setCounts();

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connect() {
        return _ref.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: '_getTxCount',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(address) {
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', (0, _utils.promisify)(this._web3Service._web3.eth.getTransactionCount)(address, 'pending'));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _getTxCount(_x2) {
        return _ref2.apply(this, arguments);
      }

      return _getTxCount;
    }()
  }, {
    key: '_compareNonceCounts',
    value: function _compareNonceCounts(txCount, address) {
      if (txCount > this._counts[address]) {
        return txCount;
      } else {
        return this._counts[address];
      }
    }
  }, {
    key: 'setCounts',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
        var _this2 = this;

        var accountsList;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._accountsService.listAccounts();

              case 2:
                accountsList = _context4.sent;
                return _context4.abrupt('return', new _promise2.default(function (resolve) {
                  accountsList.map(function () {
                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(account) {
                      var txCount;
                      return _regenerator2.default.wrap(function _callee3$(_context3) {
                        while (1) {
                          switch (_context3.prev = _context3.next) {
                            case 0:
                              _context3.next = 2;
                              return _this2._getTxCount(account.address);

                            case 2:
                              txCount = _context3.sent;

                              _this2._counts[account.address] = txCount;

                              if ((0, _keys2.default)(_this2._counts).length === accountsList.length) {
                                resolve();
                              }

                            case 5:
                            case 'end':
                              return _context3.stop();
                          }
                        }
                      }, _callee3, _this2);
                    }));

                    return function (_x3) {
                      return _ref4.apply(this, arguments);
                    };
                  }());
                }));

              case 4:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function setCounts() {
        return _ref3.apply(this, arguments);
      }

      return setCounts;
    }()
  }, {
    key: 'getNonce',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var address, txCount, nonce;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                address = this._web3Service.currentAccount();
                _context5.next = 3;
                return this._getTxCount(address);

              case 3:
                txCount = _context5.sent;
                nonce = void 0;


                if (this._counts[address]) {
                  nonce = this._compareNonceCounts(txCount, address);
                  this._counts[address] += 1;
                } else {
                  this._counts[address] = txCount;
                  nonce = txCount;
                  this._counts[address] += 1;
                }

                return _context5.abrupt('return', nonce);

              case 7:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getNonce() {
        return _ref5.apply(this, arguments);
      }

      return getNonce;
    }()
  }]);
  return NonceService;
}(_PublicService3.default);

exports.default = NonceService;