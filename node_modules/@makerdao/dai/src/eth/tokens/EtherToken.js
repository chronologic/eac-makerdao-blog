'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _maxSafeInteger = require('babel-runtime/core-js/number/max-safe-integer');

var _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _ethers = require('ethers');

var _Currency = require('../Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EtherToken = function () {
  function EtherToken(web3Service, gasEstimatorService, transactionManager) {
    (0, _classCallCheck3.default)(this, EtherToken);

    this._web3 = web3Service;
    this._gasEstimator = gasEstimatorService;
    this._transactionManager = transactionManager;
  }

  // eslint-disable-next-line


  (0, _createClass3.default)(EtherToken, [{
    key: 'allowance',
    value: function allowance(tokenOwner, spender) {
      return _promise2.default.resolve(_maxSafeInteger2.default);
    }
  }, {
    key: 'balanceOf',
    value: function balanceOf(owner) {
      return this._web3.ethersProvider().getBalance(owner).then(function (b) {
        return _ethers.utils.formatEther(b);
      });
    }

    // eslint-disable-next-line

  }, {
    key: 'approve',
    value: function approve(spender, value) {
      return _promise2.default.resolve(true);
    }

    // eslint-disable-next-line

  }, {
    key: 'approveUnlimited',
    value: function approveUnlimited(spender) {
      return _promise2.default.resolve(true);
    }
  }, {
    key: 'transfer',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(toAddress, amount) {
        var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Currency.ETH;
        var value, nonce, currentAccount, tx;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                value = (0, _Currency.getCurrency)(amount, unit).toEthersBigNumber('wei').toString();
                _context.next = 3;
                return this._transactionManager.get('nonce').getNonce();

              case 3:
                nonce = _context.sent;
                currentAccount = this._web3.currentAccount();
                tx = this._web3.eth.sendTransaction({
                  from: currentAccount,
                  to: toAddress,
                  value: value,
                  nonce: nonce
                  //gasPrice: 500000000
                });
                return _context.abrupt('return', this._transactionManager.createHybridTx(tx.then(function (tx) {
                  return { hash: tx };
                })));

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function transfer(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return transfer;
    }()
  }, {
    key: 'transferFrom',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(fromAddress, toAddress, transferValue) {
        var nonce, valueInWei, tx;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._transactionManager.get('nonce').getNonce();

              case 2:
                nonce = _context2.sent;
                valueInWei = _ethers.utils.parseEther(transferValue).toString();
                tx = this._web3.eth.sendTransaction({
                  nonce: nonce,
                  from: fromAddress,
                  to: toAddress,
                  value: valueInWei
                });
                return _context2.abrupt('return', this._transactionManager.createHybridTx(tx.then(function (tx) {
                  return { hash: tx };
                })));

              case 6:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function transferFrom(_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
      }

      return transferFrom;
    }()
  }]);
  return EtherToken;
}();

exports.default = EtherToken;