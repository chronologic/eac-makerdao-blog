'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PrivateService2 = require('../core/PrivateService');

var _PrivateService3 = _interopRequireDefault(_PrivateService2);

var _tokens = require('../../contracts/tokens');

var _tokens2 = _interopRequireDefault(_tokens);

var _contracts = require('../../contracts/contracts');

var _contracts2 = _interopRequireDefault(_contracts);

var _networks = require('../../contracts/networks');

var _networks2 = _interopRequireDefault(_networks);

var _Erc20Token = require('./tokens/Erc20Token');

var _Erc20Token2 = _interopRequireDefault(_Erc20Token);

var _EtherToken = require('./tokens/EtherToken');

var _EtherToken2 = _interopRequireDefault(_EtherToken);

var _WethToken = require('./tokens/WethToken');

var _WethToken2 = _interopRequireDefault(_WethToken);

var _PethToken = require('./tokens/PethToken');

var _PethToken2 = _interopRequireDefault(_PethToken);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EthereumTokenService = function (_PrivateService) {
  (0, _inherits3.default)(EthereumTokenService, _PrivateService);

  function EthereumTokenService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'token';
    (0, _classCallCheck3.default)(this, EthereumTokenService);
    return (0, _possibleConstructorReturn3.default)(this, (EthereumTokenService.__proto__ || (0, _getPrototypeOf2.default)(EthereumTokenService)).call(this, name, ['smartContract', 'web3', 'log', 'gasEstimator', 'transactionManager']));
  }

  (0, _createClass3.default)(EthereumTokenService, [{
    key: 'getTokens',
    value: function getTokens() {
      return (0, _keys2.default)(_tokens2.default);
    }
  }, {
    key: 'getTokenVersions',
    value: function getTokenVersions() {
      var mapping = this._getCurrentNetworkMapping();
      return this._selectTokenVersions(mapping);
    }
  }, {
    key: 'getToken',
    value: function getToken(symbol) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      // support passing in Currency constructors
      if (symbol.symbol) symbol = symbol.symbol;

      if (this.getTokens().indexOf(symbol) < 0) {
        throw new Error('provided token is not a symbol');
      }

      if (symbol === _tokens2.default.ETH) {
        return new _EtherToken2.default(this.get('web3'), this.get('gasEstimator'), this.get('transactionManager'));
      } else {
        var mapping = this._getCurrentNetworkMapping(),
            tokenInfo = mapping[symbol],
            tokenVersionData = version === null ? tokenInfo[tokenInfo.length - 1] : tokenInfo[version - 1],
            smartContractService = this.get('smartContract'),
            contract = smartContractService.getContractByAddressAndAbi(tokenVersionData.address, tokenVersionData.abi);

        if (symbol === _tokens2.default.WETH) {
          return new _WethToken2.default(contract, this.get('web3'), tokenVersionData.decimals);
        }

        if (symbol === _tokens2.default.PETH) {
          if (tokenVersionData.decimals !== 18) {
            throw new Error('PethToken code hardcodes 18 decimal places.');
          }
          var tub = smartContractService.getContractByName(_contracts2.default.SAI_TUB);
          return new _PethToken2.default(contract, this.get('web3'), tub);
        }

        return new _Erc20Token2.default(contract, this.get('web3'), tokenVersionData.decimals, symbol);
      }
    }
  }, {
    key: '_getCurrentNetworkMapping',
    value: function _getCurrentNetworkMapping() {
      var networkId = this.get('web3').networkId();
      var mapping = _networks2.default.filter(function (m) {
        return m.networkId === networkId;
      });

      if (mapping.length < 1) {
        /* istanbul ignore next */
        throw new Error('networkId not found');
      }

      return mapping[0].addresses;
    }
  }, {
    key: '_selectTokenVersions',
    value: function _selectTokenVersions(mapping) {
      var tokenArray = [];

      for (var token in _tokens2.default) {
        if (token === 'ETH') {
          tokenArray['ETH'] = [1];
        }

        if (token in mapping) {
          (function () {
            var versionArray = [];
            mapping[token].forEach(function (e) {
              versionArray.push(e.version);
            });
            tokenArray[token] = versionArray;
          })();
        }
      }

      return tokenArray;
    }
  }]);
  return EthereumTokenService;
}(_PrivateService3.default);

exports.default = EthereumTokenService;