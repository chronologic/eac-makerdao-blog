'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _contracts = require('../../contracts/contracts');

var _contracts2 = _interopRequireDefault(_contracts);

var _ethers = require('ethers');

var _Currency = require('./Currency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Cdp = function () {
  function Cdp(cdpService) {
    var _this = this;

    var cdpId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck3.default)(this, Cdp);

    this._cdpService = cdpService;
    this._smartContractService = this._cdpService.get('smartContract');
    this._transactionManager = this._smartContractService.get('transactionManager');
    if (cdpId === null) {
      this._cdpIdPromise = this._newCdpPromise();
    } else {
      this._cdpIdPromise = _promise2.default.resolve(cdpId);
    }
    this._emitterInstance = this._cdpService.get('event').buildEmitter();
    this.on = this._emitterInstance.on;
    this._emitterInstance.registerPollEvents({
      COLLATERAL: {
        USD: function USD() {
          return _this.getCollateralValue(_Currency.USD);
        },
        ETH: function ETH() {
          return _this.getCollateralValue();
        }
      },
      DEBT: {
        dai: function dai() {
          return _this.getDebtValue();
        }
      }
    });
  }

  (0, _createClass3.default)(Cdp, [{
    key: '_captureCdpIdPromise',
    value: function _captureCdpIdPromise(tubContract) {
      var currentAccount = this._smartContractService.get('web3').currentAccount();

      return new _promise2.default(function (resolve) {
        tubContract.onlognewcup = function (address, cdpIdBytes32) {
          if (currentAccount.toLowerCase() == address.toLowerCase()) {
            var cdpId = _ethers.utils.bigNumberify(cdpIdBytes32).toNumber();
            this.removeListener();
            resolve(cdpId);
          }
        };
      });
    }
  }, {
    key: '_newCdpPromise',
    value: function _newCdpPromise() {
      var tubContract = this._smartContractService.getContractByName(_contracts2.default.SAI_TUB, { hybrid: false });
      var captureCdpIdPromise = this._captureCdpIdPromise(tubContract);

      // FIXME push this back down into SmartContractService
      this._transactionObject = this._transactionManager.formatHybridTx(tubContract, 'open', [], 'SAI_TUB', this);

      return captureCdpIdPromise.then(function (result) {
        return result;
      });
    }
  }, {
    key: 'transactionObject',
    value: function transactionObject() {
      return this._transactionObject;
    }
  }, {
    key: 'getId',
    value: function getId() {
      return this._cdpIdPromise;
    }
  }]);
  return Cdp;
}();

exports.default = Cdp;


Cdp.find = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(id, cdpService) {
    var info;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(typeof id !== 'number')) {
              _context.next = 2;
              break;
            }

            throw new Error('ID must be a number.');

          case 2:
            _context.next = 4;
            return cdpService.getInfo(id);

          case 4:
            info = _context.sent;

            if (!(info.lad.toString() === '0x0000000000000000000000000000000000000000')) {
              _context.next = 7;
              break;
            }

            throw new Error("That CDP doesn't exist--try opening a new one.");

          case 7:
            return _context.abrupt('return', new Cdp(cdpService, id));

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

// each of these methods just calls the method of the same name on the service
// with the cdp's id as the first argument
var passthroughMethods = ['bite', 'drawDai', 'freePeth', 'getCollateralValue', 'getCollateralizationRatio', 'getDebtValue', 'getGovernanceFee', 'getInfo', 'getLiquidationPrice', 'give', 'isSafe', 'lockEth', 'lockPeth', 'lockWeth', 'shut', 'wipeDai'];

(0, _assign2.default)(Cdp.prototype, passthroughMethods.reduce(function (acc, name) {
  acc[name] = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var _cdpService;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.t0 = (_cdpService = this._cdpService)[name];
              _context2.t1 = _cdpService;
              _context2.next = 4;
              return this.getId();

            case 4:
              _context2.t2 = _context2.sent;
              _context2.t3 = args;
              _context2.t4 = [_context2.t2].concat(_context2.t3);
              return _context2.abrupt('return', _context2.t0.apply.call(_context2.t0, _context2.t1, _context2.t4));

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function () {
      return _ref2.apply(this, arguments);
    };
  }();
  return acc;
}, {}));