'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _PublicService2 = require('../core/PublicService');

var _PublicService3 = _interopRequireDefault(_PublicService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GasEstimatorService = function (_PublicService) {
  (0, _inherits3.default)(GasEstimatorService, _PublicService);

  function GasEstimatorService() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'gasEstimator';
    (0, _classCallCheck3.default)(this, GasEstimatorService);

    var _this = (0, _possibleConstructorReturn3.default)(this, (GasEstimatorService.__proto__ || (0, _getPrototypeOf2.default)(GasEstimatorService)).call(this, name, ['web3', 'log']));

    _this._percentage = null;
    _this._absolute = null;
    return _this;
  }

  (0, _createClass3.default)(GasEstimatorService, [{
    key: 'estimateGasLimit',
    value: function estimateGasLimit(transaction) {
      var _this2 = this;

      if (this._percentage === null && this._absolute === null) {
        throw new Error('no gas limit policy set');
      }

      return _promise2.default.all([this.get('web3').eth.getBlock('latest'), this.get('web3').eth.estimateGas(transaction)]).then(function (web3Data) {
        var blockLimit = web3Data[0].gasLimit,
            estimate = web3Data[1];

        if (_this2._percentage === null && _this2._absolute !== null) {
          return Math.min(_this2._absolute, blockLimit);
        }

        if (_this2._absolute === null) {
          return Math.min(estimate * _this2._percentage, blockLimit);
        }

        return Math.min(estimate * _this2._percentage, _this2._absolute, blockLimit);
      });
    }
  }, {
    key: 'setPercentage',
    value: function setPercentage(number) {
      if (number <= 0) {
        throw new Error('gas limit percentage must be greater than 0');
      }
      this._percentage = number;
    }
  }, {
    key: 'setAbsolute',
    value: function setAbsolute(number) {
      if (number <= 0) {
        throw new Error('gas limit must be greater than 0');
      }

      this._absolute = number;
    }
  }, {
    key: 'removePercentage',
    value: function removePercentage() {
      this._percentage = null;
    }
  }, {
    key: 'removeAbsolute',
    value: function removeAbsolute() {
      this._absolute = null;
    }
  }, {
    key: 'getPercentage',
    value: function getPercentage() {
      return this._percentage;
    }
  }, {
    key: 'getAbsolute',
    value: function getAbsolute() {
      return this._absolute;
    }
  }]);
  return GasEstimatorService;
}(_PublicService3.default);

exports.default = GasEstimatorService;