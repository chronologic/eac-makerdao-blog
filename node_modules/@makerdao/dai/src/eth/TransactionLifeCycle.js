'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _StateMachine = require('../core/StateMachine');

var _StateMachine2 = _interopRequireDefault(_StateMachine);

var _TransactionState = require('../eth/TransactionState');

var _TransactionState2 = _interopRequireDefault(_TransactionState);

var _TransactionTransitions = require('./TransactionTransitions');

var _TransactionTransitions2 = _interopRequireDefault(_TransactionTransitions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initialized = _TransactionState2.default.initialized,
    pending = _TransactionState2.default.pending,
    mined = _TransactionState2.default.mined,
    finalized = _TransactionState2.default.finalized,
    error = _TransactionState2.default.error;

var stateOrder = [initialized, pending, mined, finalized];

var TransactionLifeCycle = function () {
  function TransactionLifeCycle() {
    var businessObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    (0, _classCallCheck3.default)(this, TransactionLifeCycle);

    this._state = new _StateMachine2.default(initialized, _TransactionTransitions.transactionTypeTransitions[_TransactionTransitions2.default.transaction]);
    this._businessObject = businessObject;
  }

  (0, _createClass3.default)(TransactionLifeCycle, [{
    key: 'setPending',
    value: function setPending() {
      this._state.transitionTo(pending);
    }
  }, {
    key: 'setMined',
    value: function setMined() {
      this._state.transitionTo(mined);
    }
  }, {
    key: 'setFinalized',
    value: function setFinalized() {
      this._state.transitionTo(finalized);
    }
  }, {
    key: 'setError',
    value: function setError(errorObject) {
      this.error = errorObject;
      this._state.transitionTo(error);
    }
  }, {
    key: 'state',
    value: function state() {
      return this._state.state();
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'isInitialized',
    value: function isInitialized() {
      return this._state.inState(initialized);
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'isPending',
    value: function isPending() {
      return this._state.inState(pending);
    }

    /**
     * @returns {boolean|null}
     */

  }, {
    key: 'isMined',
    value: function isMined() {
      return this._state.inState(mined);
    }

    /**
     * @returns {boolean|null}
     */

  }, {
    key: 'isFinalized',
    value: function isFinalized() {
      return this._state.inState(finalized);
    }

    /**
     * @returns {boolean}
     */

  }, {
    key: 'isError',
    value: function isError() {
      return this._state.inState(error);
    }
  }, {
    key: '_returnValue',
    value: function _returnValue() {
      return this._businessObject || this;
    }
  }, {
    key: '_inOrPastState',
    value: function _inOrPastState(state) {
      var currentIndex = stateOrder.indexOf(this.state());
      var targetIndex = stateOrder.indexOf(state);
      if (currentIndex === -1 || targetIndex === -1) {
        throw new Error('invalid state');
      }
      return currentIndex >= targetIndex;
    }
  }, {
    key: '_onStateChange',
    value: function _onStateChange(from, to, handler) {
      var _this = this;

      if (this.isError()) return _promise2.default.reject(this.error);
      if (this._inOrPastState(to)) return _promise2.default.resolve(this._returnValue());
      return new _promise2.default(function (resolve, reject) {
        _this._state.onStateChanged(function (oldState, newState) {
          if (oldState === from && newState === to) {
            if (handler) handler(_this._returnValue());
            resolve(_this._returnValue());
          }
          if (newState === error) reject(_this.error);
        });
      });
    }
  }, {
    key: 'onPending',
    value: function onPending(handler) {
      return this._onStateChange(initialized, pending, handler);
    }
  }, {
    key: 'onMined',
    value: function onMined(handler) {
      return this._onStateChange(pending, mined, handler);
    }
  }, {
    key: 'onFinalized',
    value: function onFinalized(handler) {
      return this._onStateChange(mined, finalized, handler);
    }
  }, {
    key: 'onError',
    value: function onError(handler) {
      var _this2 = this;

      if (this.isError()) return _promise2.default.reject();
      return new _promise2.default(function (resolve, reject) {
        _this2._state.onStateChanged(function (oldState, newState) {
          if (newState === error) {
            if (handler) handler(_this2.error, _this2._returnValue());
            reject(_this2.error, _this2._returnValue());
          }
        });
      });
    }
  }]);
  return TransactionLifeCycle;
}();

exports.default = TransactionLifeCycle;